<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android Nearby Share快速分享至Linux</title>
    <url>/2024/04/02/Android-Nearby-Share%E5%BF%AB%E9%80%9F%E5%88%86%E4%BA%AB%E8%87%B3Linux/</url>
    <content><![CDATA[<p>一直以来原生的Android手机和Linux设备之间共享文字/文件等信息有诸多不便，之前也试过KDE Connect和AirDroid等软件尽管有诸多的第三方软件支持但是总觉得安装app太麻烦而且效果也不尽人意，直到我发现了一个软件 <a href="https://github.com/Martichou/rquickshare">RQuickShare</a> 这款软件支持Google原生的的Nearby Share快速分享用起来十分舒服这里推荐给大家。</p>
<p><img src="https://github.com/Martichou/rquickshare/raw/master/.github/demo.png" alt="演示图片"></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>奇巧淫技</tag>
      </tags>
  </entry>
  <entry>
    <title>Android低版本(4.x)无法通过app_process启动java进程问题详解</title>
    <url>/2019/11/17/Android%E4%BD%8E%E7%89%88%E6%9C%AC-4-x-%E6%97%A0%E6%B3%95%E9%80%9A%E8%BF%87app-process%E5%90%AF%E5%8A%A8java%E8%BF%9B%E7%A8%8B%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p>最近遇到一个奇怪的事情，公司有一块业务需要在Android上通过启动一个普通的java进程，但是从后台统计数据上来看在Android4.x上进程无法启动所以找台Nexux4 4.2.2的手机来试果然会崩溃，崩溃日志如下</p>
<span id="more"></span>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D/AndroidRuntime( 3877): &gt;&gt;&gt;&gt;&gt;&gt; AndroidRuntime START com.android.internal.os.RuntimeInit &lt;&lt;&lt;&lt;&lt;&lt;</span><br><span class="line">D/AndroidRuntime( 3877): CheckJNI is OFF</span><br><span class="line">D/dalvikvm( 3877): Trying to load lib libjavacore.so 0x0</span><br><span class="line">D/dalvikvm( 3877): Added shared lib libjavacore.so 0x0</span><br><span class="line">D/dalvikvm( 3877): Trying to load lib libnativehelper.so 0x0</span><br><span class="line">D/dalvikvm( 3877): Added shared lib libnativehelper.so 0x0</span><br><span class="line">D/dalvikvm( 3877): No JNI_OnLoad found in libnativehelper.so 0x0, skipping init</span><br><span class="line">E/dalvikvm( 3877): Dex cache directory isn&#x27;t writable: /data/dalvik-cache</span><br><span class="line">I/dalvikvm( 3877): Unable to open or create cache for /data/data/com.mjar.test/cache/app@data.apk (/data/dalvik-cache/data@data@com.mjar.test@cache@app@data.apk@classes.dex)</span><br><span class="line">E/appproc ( 3877): ERROR: could not find class &#x27;cmd.Main&#x27;</span><br><span class="line">E/dalvikvm( 3877): JNI posting fatal error: Native registration unable to find class &#x27;android/debug/JNITest&#x27;; aborting...</span><br><span class="line">I/dalvikvm( 3877): &quot;main&quot; prio=5 tid=1 NATIVE</span><br><span class="line">I/dalvikvm( 3877):   | group=&quot;main&quot; sCount=0 dsCount=0 obj=0x415b7ca8 self=0x6d455010</span><br><span class="line">I/dalvikvm( 3877):   | sysTid=3877 nice=0 sched=0/0 cgrp=default handle=1074467156</span><br><span class="line">I/dalvikvm( 3877):   | state=R schedstat=( 0 0 0 ) utm=19 stm=13 core=0</span><br><span class="line">I/dalvikvm( 3877):   #00  pc 0000132e  /system/lib/libcorkscrew.so (unwind_backtrace_thread+29)</span><br><span class="line">I/dalvikvm( 3877):   #01  pc 00060652  /system/lib/libdvm.so (dvmDumpNativeStack(DebugOutputTarget const*, int)+33)</span><br><span class="line">I/dalvikvm( 3877):   #02  pc 00054640  /system/lib/libdvm.so (dvmDumpThreadEx(DebugOutputTarget const*, Thread*, bool)+395)</span><br><span class="line">I/dalvikvm( 3877):   #03  pc 000546ae  /system/lib/libdvm.so (dvmDumpThread(Thread*, bool)+25)</span><br><span class="line">I/dalvikvm( 3877):   #04  pc 000490c0  /system/lib/libdvm.so</span><br><span class="line">I/dalvikvm( 3877):   #05  pc 00001fa8  /system/lib/libnativehelper.so (jniRegisterNativeMethods+39)</span><br><span class="line">I/dalvikvm( 3877):   #06  pc 0004cd22  /system/lib/libandroid_runtime.so</span><br><span class="line">I/dalvikvm( 3877):   #07  pc 0004d010  /system/lib/libandroid_runtime.so (android::AndroidRuntime::startReg(_JNIEnv*)+23)</span><br><span class="line">I/dalvikvm( 3877):   #08  pc 0004da60  /system/lib/libandroid_runtime.so (android::AndroidRuntime::start(char const*, char const*)+183)</span><br><span class="line">I/dalvikvm( 3877):   #09  pc 0000105a  /system/bin/app_process</span><br><span class="line">I/dalvikvm( 3877):   #10  pc 0000e348  /system/lib/libc.so (__libc_init+47)</span><br><span class="line">I/dalvikvm( 3877):   at dalvik.system.NativeStart.main(Native Method)</span><br><span class="line">I/dalvikvm( 3877):   at dalvik.system.NativeStart.main(Native Method)</span><br><span class="line">I/dalvikvm( 3877): </span><br><span class="line">E/dalvikvm( 3877): VM aborting</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>通过分析日志得知崩溃的原因是因为cmd.Main这个类没找到，但是明明在5.0以上的版本是可以执行的所以可以排除类不在dex文件里，正当百思不得其姐的时候定睛一看还有一行很关键的信息  <code>E/dalvikvm( 3877): Dex cache directory isn&#39;t writable: /data/dalvik-cache</code>  看样子跟这个有点关系啊！我们知道在android上加载dex文件时系统会做一些优化以加快运行速度也就是dex2oat的过程优化后的odex文件就存储在<code>/data/dalvik-cache</code>这个目录中，因为我们加载自定义的dex文件所以在执行dex2oat的这个操作也是以普通应用的uid去执行的所以理所当然的会没有权限写入这个目录，但是不写入这个目录dex文件不就无法运行起来到这似乎陷入了一个僵局，没办法只能翻翻系统源码看看有没有什么可操作的空间了。</p>
<ul>
<li>我这里以Android4.2.2的源码抓重要的说 感兴趣的同学可以完整的跟一下app_process启动进程的整个流程</li>
</ul>
<p>经过app_process一系列的初始化最终会调到<a href="http://androidxref.com/4.2.2_r1/xref/libcore/dalvik/src/main/java/dalvik/system/DexFile.java">DexFile.java</a>去加载原始的dex文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public final class DexFile&#123;</span><br><span class="line"></span><br><span class="line">    public DexFile(File file) throws IOException &#123;</span><br><span class="line">        this(file.getPath());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public DexFile(String fileName) throws IOException &#123;</span><br><span class="line">        mCookie = openDexFile(fileName, null, 0);</span><br><span class="line">        mFileName = fileName;</span><br><span class="line">        guard.open(&quot;close&quot;);</span><br><span class="line">        //System.out.println(&quot;DEX FILE cookie is &quot; + mCookie);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">     * Open a DEX file.  The value returned is a magic VM cookie.  On</span><br><span class="line">     * failure, an IOException is thrown.</span><br><span class="line">     */</span><br><span class="line">    native private static int openDexFile(String sourceName, String outputName,int flags, throws IOException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>经过DexFile的构造器调用最终会调到openDexFile这个native函数，这个native函数实现位于<a href="http://androidxref.com/4.2.2_r1/xref/dalvik/vm/native/dalvik_system_DexFile.cpp#519">dalvik_system_DexFile.cpp</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const DalvikNativeMethod dvm_dalvik_system_DexFile[] = &#123;</span><br><span class="line">    &#123; &quot;openDexFile&quot;,        &quot;(Ljava/lang/String;Ljava/lang/String;I)I&quot;,</span><br><span class="line">        Dalvik_dalvik_system_DexFile_openDexFile &#125;,</span><br><span class="line">    &#123; &quot;openDexFile&quot;,        &quot;([B)I&quot;,</span><br><span class="line">        Dalvik_dalvik_system_DexFile_openDexFile_bytearray &#125;,</span><br><span class="line">    &#123; &quot;closeDexFile&quot;,       &quot;(I)V&quot;,</span><br><span class="line">        Dalvik_dalvik_system_DexFile_closeDexFile &#125;,</span><br><span class="line">    &#123; &quot;defineClass&quot;,        &quot;(Ljava/lang/String;Ljava/lang/ClassLoader;I)Ljava/lang/Class;&quot;,</span><br><span class="line">        Dalvik_dalvik_system_DexFile_defineClass &#125;,</span><br><span class="line">    &#123; &quot;getClassNameList&quot;,   &quot;(I)[Ljava/lang/String;&quot;,</span><br><span class="line">        Dalvik_dalvik_system_DexFile_getClassNameList &#125;,</span><br><span class="line">    &#123; &quot;isDexOptNeeded&quot;,     &quot;(Ljava/lang/String;)Z&quot;,</span><br><span class="line">        Dalvik_dalvik_system_DexFile_isDexOptNeeded &#125;,</span><br><span class="line">    &#123; NULL, NULL, NULL &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>可以看到openDexFile这个函数在jni层对应的是Dalvik_dalvik_system_DexFile_openDexFile函数这个函数中其中有一段很关键的代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/*</span><br><span class="line">     * Try to open it directly as a DEX if the name ends with &quot;.dex&quot;.</span><br><span class="line">     * If that fails (or isn&#x27;t tried in the first place), try it as a</span><br><span class="line">     * Zip with a &quot;classes.dex&quot; inside.</span><br><span class="line">     */</span><br><span class="line">    if (hasDexExtension(sourceName)</span><br><span class="line">            &amp;&amp; dvmRawDexFileOpen(sourceName, outputName, &amp;pRawDexFile, false) == 0) &#123;</span><br><span class="line">        ALOGV(&quot;Opening DEX file &#x27;%s&#x27; (DEX)&quot;, sourceName);</span><br><span class="line"></span><br><span class="line">        pDexOrJar = (DexOrJar*) malloc(sizeof(DexOrJar));</span><br><span class="line">        pDexOrJar-&gt;isDex = true;</span><br><span class="line">        pDexOrJar-&gt;pRawDexFile = pRawDexFile;</span><br><span class="line">        pDexOrJar-&gt;pDexMemory = NULL;</span><br><span class="line">    &#125; else if (dvmJarFileOpen(sourceName, outputName, &amp;pJarFile, false) == 0) &#123;</span><br><span class="line">        ALOGV(&quot;Opening DEX file &#x27;%s&#x27; (Jar)&quot;, sourceName);</span><br><span class="line"></span><br><span class="line">        pDexOrJar = (DexOrJar*) malloc(sizeof(DexOrJar));</span><br><span class="line">        pDexOrJar-&gt;isDex = false;</span><br><span class="line">        pDexOrJar-&gt;pJarFile = pJarFile;</span><br><span class="line">        pDexOrJar-&gt;pDexMemory = NULL;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        ALOGV(&quot;Unable to open DEX file &#x27;%s&#x27;&quot;, sourceName);</span><br><span class="line">        dvmThrowIOException(&quot;unable to open DEX file&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>上面的注释还是写的比较详细的如果是dex文件后缀的则直接打开同时odex文件会直接写到<code>/data/dalvik-cache</code>这个目录中，这个也是直接导致我们通过app_process运行dex文件会崩溃的元凶，别着急我们继续往下看下面还有一个处理jar/zip/apk后缀的分支这个里面会不会有什么惊喜呢？跟到<code>dvmJarFileOpen</code>里面可以看到有这么一句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    int dvmJarFileOpen(const char* fileName, const char* odexOutputName,</span><br><span class="line">    JarFile** ppJarFile, bool isBootstrap)</span><br><span class="line">&#123;</span><br><span class="line">    //......</span><br><span class="line"></span><br><span class="line">    /* First, look for a &quot;.odex&quot; alongside the jar file.  It will</span><br><span class="line">     * have the same name/path except for the extension.</span><br><span class="line">     */</span><br><span class="line">    fd = openAlternateSuffix(fileName, &quot;odex&quot;, O_RDONLY, &amp;cachedName);</span><br><span class="line">    </span><br><span class="line">    //......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看到这里的注释我想大家应该的都明白了，对于apk文件处理方式有些特殊会优先在同级目录查找odex文件，所以我需要做的仅仅是把dex文件改为apk文件然后通过反射调用<a href="http://androidxref.com/4.2.2_r1/xref/libcore/dalvik/src/main/java/dalvik/system/DexFile.java#139">DexFile#loadDex函数</a>指定第二个参数odex文件名称提前把odex文件生成出来再使用app_process去运行apk文件就可以了，不过为什么在Android5.0以上可以直接加载dex文件呢，于是我在8.0系统上又试了一下发现在运行dex文件的同时系统会自动在同级目录创建一个oat目录里面存放的正是odex文件，所以由此可以猜测当在高版本的系统上运行app_process命令如果没有权限写入<code>/data/dalvik-cache</code>则会在同级目录自动创建odex文件，这只是我个人的猜想并没有详细的研究源码怎么实现的感兴趣的话可以自己研究一下。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>疑难杂症</tag>
      </tags>
  </entry>
  <entry>
    <title>ByteBuffer详解</title>
    <url>/2020/11/11/ByteBuffer%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<blockquote>
<p>之前对NIO开发不熟悉导致对ByteBuffer一直是一知半解的状态正好看到知乎上有个朋友写的不错于是转载过来</p>
<p>转自:<a href="https://zhuanlan.zhihu.com/p/56876443">https://zhuanlan.zhihu.com/p/56876443</a></p>
</blockquote>
<h2 id="在Java-nio中，主要有三大组件：Buffer，Channel和Selector。这三者之间的关系可以按照如下方式进行理解："><a href="#在Java-nio中，主要有三大组件：Buffer，Channel和Selector。这三者之间的关系可以按照如下方式进行理解：" class="headerlink" title="在Java nio中，主要有三大组件：Buffer，Channel和Selector。这三者之间的关系可以按照如下方式进行理解："></a>在Java nio中，主要有三大组件：Buffer，Channel和Selector。这三者之间的关系可以按照如下方式进行理解：</h2><ul>
<li>Buffer提供了一个字节缓冲区，其可以不断的从Channel中读取接收到的数据。Buffer的优点主要在于其提供了一系列的Api，能够让用户更方便的对数据进行读取和写入；</li>
<li>Channel简单来说就是一个信道，也就是客户端与服务器的一个连接，而且每个客户端都会对应一个Channel对象；</li>
<li>Selector是Java nio能够支持高并发数据处理一个关键，其核心理念就是IO多路复用的原理，简单的说就是当多个客户端（Channel）连接服务器时，可以通过Selector同时对这些客户端请求进行监听，当客户端发送数据到服务器之后由Selector对这些Channel进行分发处理。</li>
</ul>
<p>本文首先讲解ByteBuffer的实现原理，然后会介绍ByteBuffer中常用的Api，以及其在使用过程中需要注意的点。</p>
<ol>
<li><p><strong>实现原理</strong><br>对于ByteBuffer，其主要有五个属性：mark，position，limit，capacity和array。这五个属性的作用如下：</p>
<ul>
<li>mark：记录了当前所标记的索引下标；</li>
<li>position：对于写入模式，表示当前可写入数据的下标，对于读取模式，表示接下来可以读取的数据的下标；</li>
<li>limit：对于写入模式，表示当前可以写入的数组大小，默认为数组的最大长度，对于读取模式，表示当前最多可以读取的数据的位置下标；</li>
<li>capacity：表示当前数组的容量大小；</li>
<li>array：保存了当前写入的数据。</li>
</ul>
<p>这几个数据中，除了array是用于保存数据的以外，这里最终的主要是position，limit和capacity三个属性，因为对于写入和读取模式，这三个属性的表示的含义大不一样。</p>
<span id="more"></span></li>
</ol>
<p>1.1 <strong>写入模式</strong><br>   如下图所示为初始状态和写入3个字节之后position，limit和capacity三个属性的状态：</p>
<p>   <img src="https://pic3.zhimg.com/80/v2-7c322e5d80e7ff2300d037c5b8b3f9de_720w.jpg"></p>
<p>   从图中可以看出，在写入模式下，limit指向的始终是当前可最多写入的数组索引下标，position指向的则是下一个可以写入的数据的索引位置，而capacity则始终不会变化，即为数组大小。</p>
<p>   1.2 <strong>读取模式</strong></p>
<p>   假设我们按照上述方式在初始长度为6的ByteBuffer中写入了三个字节的数据，此时我们将模式切换为读取模式，那么这里的position，limit和capacity则变为如下形式：</p>
<p>   <img src="https://pic4.zhimg.com/80/v2-30b16959027ab4dbbc8252557e22c717_720w.jpg"></p>
<p>   可以看到，当切换为读取模式之后，limit则指向了最后一个可读取数据的下一个位置，表示最多可读取的数据；position则指向了数组的初始位置，表示下一个可读取的数据的位置；capacity还是表示数组的最大容量。这里当我们一个一个读取数据的时候，position就会依次往下切换，当期与limit重合时，就表示当前ByteBuffer中已没有可读取的数据了。</p>
<ol start="2">
<li><p><strong>使用实例</strong></p>
<p>对于ByteBuffer的基本使用方式，从上面的演示中就可以看出，其主要有初始化，写入，切换和读取几个基本操作。如下是ByteBuffer的一个基本使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ByteBufferApp</span> &#123;</span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testBuffer</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 初始化一个大小为6的ByteBuffer</span></span><br><span class="line">    <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">6</span>);</span><br><span class="line">    print(buffer);  <span class="comment">// 初始状态：position: 0, limit: 6, capacity: 6</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 往buffer中写入3个字节的数据</span></span><br><span class="line">    buffer.put((<span class="type">byte</span>) <span class="number">1</span>);</span><br><span class="line">    buffer.put((<span class="type">byte</span>) <span class="number">2</span>);</span><br><span class="line">    buffer.put((<span class="type">byte</span>) <span class="number">3</span>);</span><br><span class="line">    print(buffer);  <span class="comment">// 写入之后的状态：position: 3, limit: 6, capacity: 6</span></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;************** after flip **************&quot;</span>);</span><br><span class="line">    buffer.flip();</span><br><span class="line">    print(buffer);  <span class="comment">// 切换为读取模式之后的状态：position: 0, limit: 3, capacity: 6</span></span><br><span class="line"></span><br><span class="line">    buffer.get();</span><br><span class="line">    buffer.get();</span><br><span class="line">    print(buffer);  <span class="comment">// 读取两个数据之后的状态：position: 2, limit: 3, capacity: 6</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(ByteBuffer buffer)</span> &#123;</span><br><span class="line">    System.out.printf(<span class="string">&quot;position: %d, limit: %d, capacity: %d\n&quot;</span>,</span><br><span class="line">      buffer.position(), buffer.limit(), buffer.capacity());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上面的示例中，我们首先创建一个最大容量为6的ByteBuffer，此时position为0，即初始状态，而limit为6，与最大容量一致。当我们往buffer中写入三个字节数据之后，此时的position为3，limit还是6，表示还可以继续往buffer中写入三个数据。当我们切换为读取模式之后，需要注意，此时buffer中写入了三个字节的数据，也就是说只有三个字节的数据可供读取，因而切换为读取模式之后，position指向了0，表示下一个可供读取的数据位置，而limit为3，即为之前写入的数据数量，而capacity始终为6，表示buffer的最大大小。</p>
<p>2.1 <strong>相关api</strong></p>
<ul>
<li><p>mark()<br>在前面我们讲过，ByteBuffer中海油一个mark属性，这个属性是一个标识的作用，即记录当前position的位置，在后续如果调用reset()或者flip()方法时，ByteBuffer的position就会被重置到mark所记录的位置。因而对于写入模式，在mark()并reset()后，将会回到mark记录的可以写入数据的位置；对于读取模式，在mark()并reset()后，将会回到mark记录的可以读取的数据的位置。如下是mark()方法分别演示写入和读取数据的示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ByteBufferApp</span> &#123;</span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMark</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">6</span>);</span><br><span class="line">    <span class="comment">// position: 0, limit: 6, capacity: 6</span></span><br><span class="line"></span><br><span class="line">    buffer.put((<span class="type">byte</span>) <span class="number">1</span>);</span><br><span class="line">    buffer.put((<span class="type">byte</span>) <span class="number">2</span>);</span><br><span class="line">    buffer.put((<span class="type">byte</span>) <span class="number">3</span>);</span><br><span class="line">    <span class="comment">// position: 3, limit: 6, capacity: 6</span></span><br><span class="line"></span><br><span class="line">    buffer.mark();  <span class="comment">// 写入三个字节数据后进行标记</span></span><br><span class="line">    <span class="comment">// position: 3, limit: 6, capacity: 6</span></span><br><span class="line"></span><br><span class="line">    buffer.put((<span class="type">byte</span>) <span class="number">4</span>); <span class="comment">// 再次写入一个字节数据</span></span><br><span class="line">    <span class="comment">// position: 4, limit: 6, capacity: 6</span></span><br><span class="line"></span><br><span class="line">    buffer.reset(); <span class="comment">// 对buffer进行重置，此时将恢复到Mark时的状态</span></span><br><span class="line">    <span class="comment">// position: 3, limit: 6, capacity: 6</span></span><br><span class="line"></span><br><span class="line">    buffer.flip();  <span class="comment">// 切换为读取模式，此时有三个数据可供读取</span></span><br><span class="line">    <span class="comment">// position: 0, limit: 3, capacity: 6</span></span><br><span class="line"></span><br><span class="line">    buffer.get(); <span class="comment">// 读取一个字节数据之后进行标记</span></span><br><span class="line">    buffer.mark();</span><br><span class="line">    <span class="comment">// position: 1, limit: 3, capacity: 6</span></span><br><span class="line"></span><br><span class="line">    buffer.get(); <span class="comment">// 继续读取一个字节数据</span></span><br><span class="line">    <span class="comment">// position: 2, limit: 3, capacity: 6</span></span><br><span class="line"></span><br><span class="line">    buffer.reset(); <span class="comment">// 进行重置之后，将会恢复到mark的状态</span></span><br><span class="line">    <span class="comment">// position: 1, limit: 3, capacity: 6</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>rewind()<br>对于rewind()方法，它的主要作用在于将当前的position重置为0，并且mark重置为-1，而且无论mark是否进行过标记。很明显，rewind()和reset()方法都是进行重置的，但是reset()方法则是会优先重置到mark标记的位置。同理，对于写入模式，rewind()方法会重置为初始写入状态，对于读取模式，rewind()则会重置为初始读取模式，其不会对limit属性有任何影响。如下是rewind()方法的一个使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ByteBufferApp</span> &#123;</span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRewind</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">6</span>);</span><br><span class="line">    <span class="comment">// position: 0, limit: 6, capacity: 6</span></span><br><span class="line"></span><br><span class="line">    buffer.put((<span class="type">byte</span>) <span class="number">1</span>);</span><br><span class="line">    buffer.put((<span class="type">byte</span>) <span class="number">2</span>);</span><br><span class="line">    buffer.put((<span class="type">byte</span>) <span class="number">3</span>);</span><br><span class="line">    <span class="comment">// position: 3, limit: 6, capacity: 6</span></span><br><span class="line"></span><br><span class="line">    buffer.rewind();  <span class="comment">// 调用rewind()方法之后，buffer状态将会重置</span></span><br><span class="line">    <span class="comment">// position: 0, limit: 6, capacity: 6</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>compact()<br>对于compact()方法，其主要作用在于在读取模式下进行数据压缩，并且方便下一步继续写入数据。比如在一个长度为6的ByteBuffer中写满了数据，然后在读取模式下读取了三个数据之后，我们想继续往buffer中写入数据，此时由于只有前三个字节是可用的，而后三个字节是有效的数据，此时如果写入的话是会把后面三个有效字节给覆盖掉的。因而需要将后面三个有效字节往前移动，以空出三个字节，并且将position指向下一个可供写入的位置，而不是迁移之后的索引0处。compact()方法的作用即在于此，如下是该方法的一个使用示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ByteBufferApp</span> &#123;</span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCompact</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">6</span>);</span><br><span class="line">    buffer.put((<span class="type">byte</span>) <span class="number">1</span>);</span><br><span class="line">    buffer.put((<span class="type">byte</span>) <span class="number">2</span>);</span><br><span class="line">    buffer.put((<span class="type">byte</span>) <span class="number">3</span>);</span><br><span class="line">    buffer.put((<span class="type">byte</span>) <span class="number">4</span>);</span><br><span class="line">    buffer.put((<span class="type">byte</span>) <span class="number">5</span>);</span><br><span class="line">    buffer.put((<span class="type">byte</span>) <span class="number">6</span>); <span class="comment">// 初始化一个写满的buffer</span></span><br><span class="line"></span><br><span class="line">    buffer.flip();</span><br><span class="line">    <span class="comment">// position: 0, limit: 6, capacity: 6  -- 切换为读取模式</span></span><br><span class="line"></span><br><span class="line">    buffer.get();</span><br><span class="line">    buffer.get();</span><br><span class="line">    <span class="comment">// position: 2, limit: 6, capacity: 6  -- 读取两个字节后，还剩余四个字节</span></span><br><span class="line"></span><br><span class="line">    buffer.compact();</span><br><span class="line">    <span class="comment">// position: 4, limit: 6, capacity: 6  -- 进行压缩之后将从第五个字节开始</span></span><br><span class="line"></span><br><span class="line">    buffer.put((<span class="type">byte</span>) <span class="number">7</span>);</span><br><span class="line">    <span class="comment">// position: 5, limit: 6, capacity: 6  -- 写入一个字节数据的状态</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p><strong>小结</strong><br>本文首先展示了ByteBuffer在写入模式和读取模式下内部的一个状态，然后简单讲解了ByteBuffer的使用方式，并且展示了ByteBuffer各个常用Api的作用和用法。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>开发实战</tag>
      </tags>
  </entry>
  <entry>
    <title>Frida开发手册</title>
    <url>/2021/04/08/Frida%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>以下是在使用<code>python</code>开发<code>frida</code>脚本过程中收集到的一些用法, 这里将学习的知识点做个归纳总结</p>
<h2 id="Hook函数"><a href="#Hook函数" class="headerlink" title="Hook函数"></a>Hook函数</h2><h3 id="Java普通函数"><a href="#Java普通函数" class="headerlink" title="Java普通函数"></a>Java普通函数</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Context</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;android.content.Context&#x27;</span>);</span><br><span class="line"><span class="title class_">Context</span>.<span class="property">checkCallingOrSelfPermission</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">permission: <span class="built_in">string</span></span>) &#123;</span><br><span class="line">    <span class="comment">// 以下两种写法都可以</span></span><br><span class="line">    <span class="comment">// return Context.checkCallingOrSelfPermission.call(this, permission)</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">checkCallingOrSelfPermission</span>(permission);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果没有同名的重载函数则直接调用函数的<code>implementation</code>来重写即可</p>
<span id="more"></span>

<h3 id="Java重载函数"><a href="#Java重载函数" class="headerlink" title="Java重载函数"></a>Java重载函数</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Context</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;android.content.Context&#x27;</span>);</span><br><span class="line"><span class="title class_">Context</span>.<span class="property">checkPermission</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">permission: <span class="built_in">string</span>, pid: <span class="built_in">number</span>, uid: <span class="built_in">number</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">checkPermission</span>(permission, pid, uid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果需要 hook特定的重载函数则必须要在函数名后通过<code>overload</code>函数来指定参数列表</p>
<h2 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h2><h3 id="Java构造器重载函数"><a href="#Java构造器重载函数" class="headerlink" title="Java构造器重载函数"></a>Java构造器重载函数</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="title class_">Person</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.example.Person&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> person = <span class="title class_">Person</span>.<span class="property">$new</span>.<span class="title function_">overload</span>(<span class="string">&quot;java.lang.String&quot;</span>, <span class="string">&quot;int&quot;</span>).<span class="title function_">call</span>(<span class="title class_">Person</span>, <span class="string">&quot;Alice&quot;</span>, <span class="number">25</span>);</span><br></pre></td></tr></table></figure>

<h3 id="Java类重载函数"><a href="#Java类重载函数" class="headerlink" title="Java类重载函数"></a>Java类重载函数</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">EncryptUtil</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;xxx.utils.EncryptUtil&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> encryptHMAC = <span class="title class_">EncryptUtil</span>.<span class="property">encryptHMAC</span>.<span class="title function_">overload</span>(<span class="string">&#x27;java.lang.String&#x27;</span>, <span class="string">&#x27;java.lang.String&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> new_signature = encryptHMAC.<span class="title function_">call</span>(<span class="title class_">EncryptUtil</span>,msg_body, tran_id);</span><br></pre></td></tr></table></figure>

<h2 id="数组集合操作"><a href="#数组集合操作" class="headerlink" title="数组集合操作"></a>数组集合操作</h2><h3 id="创建Java数组"><a href="#创建Java数组" class="headerlink" title="创建Java数组"></a>创建Java数组</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> buffer = <span class="title class_">Java</span>.<span class="title function_">array</span>(<span class="string">&#x27;byte&#x27;</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buffer.<span class="property">length</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; buffer.<span class="property">length</span>; ++i)&#123;</span><br><span class="line">    <span class="keyword">let</span> b = buffer[i];</span><br><span class="line">    <span class="comment">//todo something</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br></pre></td></tr></table></figure>

<h3 id="创建固定长度的Java数组"><a href="#创建固定长度的Java数组" class="headerlink" title="创建固定长度的Java数组"></a>创建固定长度的Java数组</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> buffer = <span class="title class_">Java</span>.<span class="title function_">array</span>(<span class="string">&#x27;byte&#x27;</span>, <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">1024</span>).<span class="title function_">fill</span>(<span class="number">0</span>)); <span class="comment">// size of 1024 </span></span><br></pre></td></tr></table></figure>

<h3 id="修改Java数组"><a href="#修改Java数组" class="headerlink" title="修改Java数组"></a>修改Java数组</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">String</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.String&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> stringInstance = <span class="title class_">String</span>.$new(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Arrays</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.util.Arrays&quot;</span>);</span><br><span class="line"><span class="title class_">Arrays</span>.<span class="title function_">fill</span>(array, <span class="number">0</span>, <span class="number">1</span>, stringInstance); <span class="comment">// equivalent to var_0[0] = stringInstance</span></span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Demo</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.test.Demo&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> intarr = <span class="title class_">Demo</span>.<span class="title function_">getIntArray</span>();</span><br><span class="line"><span class="keyword">const</span> newIntArr = <span class="title class_">Array</span>.<span class="title function_">from</span>(intarr).<span class="title function_">concat</span>(<span class="number">888</span>) <span class="comment">// append element to array</span></span><br></pre></td></tr></table></figure>

<h3 id="遍历Java集合"><a href="#遍历Java集合" class="headerlink" title="遍历Java集合"></a>遍历Java集合</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">ArrayList</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.util.ArrayList&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> list = <span class="title class_">ArrayList</span>.$new();</span><br><span class="line"><span class="keyword">let</span> iter = list.<span class="title function_">iterator</span>();</span><br><span class="line"><span class="keyword">while</span>(iter.<span class="title function_">hasNext</span>()) &#123;</span><br><span class="line">    <span class="keyword">let</span> item = iter.<span class="title function_">next</span>();</span><br><span class="line">	<span class="comment">//todo something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="捕获Java异常"><a href="#捕获Java异常" class="headerlink" title="捕获Java异常"></a>捕获Java异常</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Test</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;com.exception.example.Test&quot;</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="title class_">Test</span>.<span class="title function_">throwException</span>();</span><br><span class="line">&#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">    <span class="comment">//ex is a handle, you have to cast it.</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">Exception</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Trowable&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> item = <span class="title class_">Java</span>.<span class="title function_">cast</span>(ex,<span class="title class_">Exception</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="title class_">SpecificException</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(item.<span class="property">$className</span>);</span><br><span class="line">    item = <span class="title class_">Java</span>.<span class="title function_">cast</span>(ex,<span class="title class_">SpecificException</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item.<span class="property">attribute</span>.<span class="property">value</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="抛出Java异常"><a href="#抛出Java异常" class="headerlink" title="抛出Java异常"></a>抛出Java异常</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Activity</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;android.app.Activity&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Exception</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.Exception&#x27;</span>);</span><br><span class="line"><span class="title class_">Activity</span>.<span class="property">onResume</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="title class_">Exception</span>.$new(<span class="string">&#x27;Oops!&#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="成员变量访问修改"><a href="#成员变量访问修改" class="headerlink" title="成员变量访问修改"></a>成员变量访问修改</h2><h3 id="访问修改Java对象成员变量"><a href="#访问修改Java对象成员变量" class="headerlink" title="访问修改Java对象成员变量"></a>访问修改Java对象成员变量</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class Test &#123;</span><br><span class="line">	<span class="type">double</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">200.0d</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意如果要访问或者修改对象的<code>f</code>成员变量则<strong>不能</strong>直接通过对象<code>.f</code>访问,需要调用<code>.f</code>的<code>value</code>属性</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Test</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.example.Test&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> test = <span class="title class_">Test</span>.$new();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`before=<span class="subst">$&#123;test.f.value&#125;</span>`</span>);</span><br><span class="line">example.<span class="property">f</span>.<span class="property">value</span> = <span class="number">100</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`after=<span class="subst">$&#123;test.f.value&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>

<h3 id="访问修改具有同名函数的Java对象成员变量"><a href="#访问修改具有同名函数的Java对象成员变量" class="headerlink" title="访问修改具有同名函数的Java对象成员变量"></a>访问修改具有同名函数的Java对象成员变量</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class Test &#123;</span><br><span class="line">	<span class="type">double</span> <span class="variable">f</span> <span class="operator">=</span> <span class="number">200.0d</span>;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">f</span><span class="params">()</span> &#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果出现同名的函数会导致<code>frida</code>无法区分是要访问成员变量还是函数遇到这种情况需要使用<code>_</code>加以区分</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Test</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.example.Test&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> test = <span class="title class_">Test</span>.$new();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`before=<span class="subst">$&#123;test._f.value&#125;</span>`</span>);</span><br><span class="line">example.<span class="property">f</span>.<span class="property">value</span> = <span class="number">100</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`after=<span class="subst">$&#123;test._f.value&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>

<h3 id="检查Java对象类型"><a href="#检查Java对象类型" class="headerlink" title="检查Java对象类型"></a>检查Java对象类型</h3><p>暂时没有查到最佳实践,不过可以通过检查对象的<code>$className</code>实现</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> className = event.<span class="property">$className</span>;</span><br><span class="line"><span class="keyword">if</span> (className === <span class="string">&quot;android.view.KeyEvent&quot;</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (className === <span class="string">&quot;android.view.MotionEvent&quot;</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="访问c-类或结构体成员变量"><a href="#访问c-类或结构体成员变量" class="headerlink" title="访问c++类或结构体成员变量"></a>访问c++类或结构体成员变量</h3><h4 id="不存在虚函数的类或结构体"><a href="#不存在虚函数的类或结构体" class="headerlink" title="不存在虚函数的类或结构体"></a>不存在虚函数的类或结构体</h4><p>不包含虚函数可以直接计算成员变量的偏移量</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MotionEvent</span> : <span class="keyword">public</span> InputEvent &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// Fields</span></span><br><span class="line">    <span class="type">int32_t</span> mAction;</span><br><span class="line">    <span class="type">int32_t</span> mFlags;</span><br><span class="line">    <span class="comment">// Other fields and methods...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="comment">// Protected fields</span></span><br><span class="line">    <span class="type">int32_t</span> mEdgeFlags;</span><br><span class="line">    <span class="comment">// Other protected fields...</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">NativePointer</span> event = <span class="keyword">new</span> <span class="title class_">NativePointer</span>(<span class="number">0x9081723891</span>);</span><br><span class="line"><span class="keyword">const</span> mAction = event.<span class="title function_">readS32</span>();</span><br><span class="line"><span class="keyword">const</span> mFlags = event.<span class="title function_">add</span>(<span class="number">4</span>).<span class="title function_">readS32</span>();</span><br><span class="line"><span class="keyword">const</span> mEdgeFlags = event.<span class="title function_">add</span>(<span class="number">8</span>).<span class="title function_">readS32</span>();</span><br></pre></td></tr></table></figure>

<h4 id="存在虚函数的类或结构体"><a href="#存在虚函数的类或结构体" class="headerlink" title="存在虚函数的类或结构体"></a>存在虚函数的类或结构体</h4><p>包含虚函数的话类成员的第一个是虚函数表指针<code>vptr</code>因此需要将指针的偏移量考虑进去</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">InputEvent</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">InputEvent</span>() &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="type">int32_t</span> <span class="title">getType</span><span class="params">()</span> <span class="type">const</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="type">int32_t</span> mId;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MotionEvent</span> : <span class="keyword">public</span> InputEvent &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int32_t</span> mAction;</span><br><span class="line">    <span class="type">int32_t</span> mFlags;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">NativePointer</span> event = <span class="keyword">new</span> <span class="title class_">NativePointer</span>(<span class="number">0x9081723891</span>);</span><br><span class="line"><span class="keyword">const</span> mId = event.<span class="title function_">add</span>(<span class="title class_">Process</span>.<span class="property">pointerSize</span>).<span class="title function_">readS32</span>();</span><br><span class="line"><span class="keyword">const</span> mAction = event.<span class="title function_">add</span>(<span class="title class_">Process</span>.<span class="property">pointerSize</span>).<span class="title function_">add</span>(<span class="number">4</span>).<span class="title function_">readS32</span>();</span><br><span class="line"><span class="keyword">const</span> mFlags = event.<span class="title function_">add</span>(<span class="title class_">Process</span>.<span class="property">pointerSize</span>).<span class="title function_">add</span>(<span class="number">8</span>).<span class="title function_">readS32</span>();</span><br></pre></td></tr></table></figure>

<h4 id="处理std-vector-std-string-std-deque"><a href="#处理std-vector-std-string-std-deque" class="headerlink" title="处理std::vector std::string std::deque"></a>处理std::vector std::string std::deque</h4><p><a href="https://github.com/thestr4ng3r/frida-cpp">https://github.com/thestr4ng3r/frida-cpp</a></p>
<p>引用:</p>
<ol>
<li>C++：虚函数内存布局解析（以 clang 编译器为例）<a href="https://www.less-bug.com/posts/cpp-vtable-and-object-memory-layout-clang-example/">https://www.less-bug.com/posts/cpp-vtable-and-object-memory-layout-clang-example/</a></li>
<li>Frida: How to read a struct or a struct pointer or a pointer of a struct pointer? <a href="https://gist.github.com/schirrmacher/05ad9f1a0ba428e0cc6aeed46036ccd6">https://gist.github.com/schirrmacher/05ad9f1a0ba428e0cc6aeed46036ccd6</a></li>
</ol>
<h2 id="实现Java继承类"><a href="#实现Java继承类" class="headerlink" title="实现Java继承类"></a>实现Java继承类</h2><p>两种方式推荐第一种更符合书写方式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">SomeBaseClass</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;com.example.SomeBaseClass&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> X509TrustManager = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;javax.net.ssl.X509TrustManager&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MyTrustManager</span> = <span class="title class_">Java</span>.<span class="title function_">registerClass</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;com.example.MyTrustManager&#x27;</span>,</span><br><span class="line">    <span class="attr">implements</span>: [X509TrustManager],</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="title function_">checkClientTrusted</span>(<span class="params">chain, authType</span>) &#123;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">checkServerTrusted</span>(<span class="params">chain, authType</span>) &#123;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">getAcceptedIssuers</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> [];</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">MyWeirdTrustManager</span> = <span class="title class_">Java</span>.<span class="title function_">registerClass</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;com.example.MyWeirdTrustManager&#x27;</span>,</span><br><span class="line">    <span class="attr">superClass</span>: <span class="title class_">SomeBaseClass</span>,</span><br><span class="line">    <span class="attr">implements</span>: [X509TrustManager],</span><br><span class="line">    <span class="attr">fields</span>: &#123;</span><br><span class="line">        <span class="attr">description</span>: <span class="string">&#x27;java.lang.String&#x27;</span>,</span><br><span class="line">        <span class="attr">limit</span>: <span class="string">&#x27;int&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        $init() &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Constructor called&#x27;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">checkClientTrusted</span>(<span class="params">chain, authType</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;checkClientTrusted&#x27;</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">checkServerTrusted</span>: [&#123;</span><br><span class="line">            <span class="attr">returnType</span>: <span class="string">&#x27;void&#x27;</span>,</span><br><span class="line">            <span class="attr">argumentTypes</span>: [<span class="string">&#x27;[Ljava.security.cert.X509Certificate;&#x27;</span>, <span class="string">&#x27;java.lang.String&#x27;</span>],</span><br><span class="line">            <span class="title function_">implementation</span>(<span class="params">chain, authType</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;checkServerTrusted A&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            <span class="attr">returnType</span>: <span class="string">&#x27;java.util.List&#x27;</span>,</span><br><span class="line">            <span class="attr">argumentTypes</span>: [<span class="string">&#x27;[Ljava.security.cert.X509Certificate;&#x27;</span>, <span class="string">&#x27;java.lang.String&#x27;</span>, <span class="string">&#x27;java.lang.String&#x27;</span>],</span><br><span class="line">            <span class="title function_">implementation</span>(<span class="params">chain, authType, host</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;checkServerTrusted B&#x27;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;],</span><br><span class="line">        <span class="title function_">getAcceptedIssuers</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;getAcceptedIssuers&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> [];</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> myOutputClass = <span class="title class_">Java</span>.<span class="title function_">registerClass</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;com.example.MyOutputStream&#x27;</span>,</span><br><span class="line">    <span class="attr">superClass</span>: <span class="string">&quot;java.io.ByteArrayOutputStream&quot;</span>,</span><br><span class="line">    <span class="attr">implements</span>: [],</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="attr">write</span>: [&#123;</span><br><span class="line">            <span class="attr">returnType</span>: <span class="string">&#x27;void&#x27;</span>,</span><br><span class="line">            <span class="attr">argumentTypes</span>: [<span class="string">&#x27;[B&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>],</span><br><span class="line">            <span class="attr">implementation</span>: <span class="keyword">function</span> (<span class="params">b, off, len</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;MyOutputStream.write(&quot;</span> + <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(b) + <span class="string">&quot;,&quot;</span> + off + <span class="string">&quot;,&quot;</span> + len + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$super</span>.<span class="title function_">write</span>(b, off, len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            <span class="attr">returnType</span>: <span class="string">&#x27;void&#x27;</span>,</span><br><span class="line">            <span class="attr">argumentTypes</span>: [<span class="string">&#x27;int&#x27;</span>],</span><br><span class="line">            <span class="attr">implementation</span>: <span class="keyword">function</span> (<span class="params">b</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;MyOutputStream.write(&#x27;</span> + b + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$super</span>.<span class="title function_">write</span>(b);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> myInstance = myOutputClass.$new();</span><br></pre></td></tr></table></figure>

<h2 id="获取Android-Context"><a href="#获取Android-Context" class="headerlink" title="获取Android Context"></a>获取Android Context</h2><h3 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">ActivityThread</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.app.ActivityThread&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> application = <span class="title class_">ActivityThread</span>.<span class="title function_">currentApplication</span>();</span><br></pre></td></tr></table></figure>

<h3 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">ActivityThread</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.app.ActivityThread&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> activityThread = <span class="title class_">ActivityThread</span>.<span class="title function_">currentActivityThread</span>();</span><br><span class="line"><span class="keyword">let</span> mActivities = activityThread.<span class="property">mActivities</span>.<span class="property">value</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">ActivityThread</span>$ActivityClientRecord = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.app.ActivityThread$ActivityClientRecord&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> activityClientRecord = <span class="title class_">Java</span>.<span class="title function_">cast</span>(mActivities.<span class="property">mArray</span>.<span class="property">value</span>[<span class="number">1</span>], <span class="title class_">ActivityThread</span>$ActivityClientRecord).<span class="property">activity</span>.<span class="property">value</span>;</span><br><span class="line"><span class="keyword">let</span> activity = activityClientRecord.<span class="property">activity</span>.<span class="property">value</span>;</span><br></pre></td></tr></table></figure>

<h2 id="逆向工程进阶"><a href="#逆向工程进阶" class="headerlink" title="逆向工程进阶"></a>逆向工程进阶</h2><h3 id="Objection-手术刀级别的神器"><a href="#Objection-手术刀级别的神器" class="headerlink" title="Objection 手术刀级别的神器"></a>Objection 手术刀级别的神器</h3><p>具体用法参考:<a href="https://github.com/sensepost/objection">https://github.com/sensepost/objection</a></p>
<h3 id="打印方法调用堆栈"><a href="#打印方法调用堆栈" class="headerlink" title="打印方法调用堆栈"></a>打印方法调用堆栈</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Log</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;android.util.Log&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Exception</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.Exception&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Log</span>.<span class="title function_">getStackTraceString</span>(<span class="title class_">Exception</span>.$new()));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 一行解决</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;android.util.Log&#x27;</span>).<span class="title function_">getStackTraceString</span>(<span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.Exception&#x27;</span>).$new()));</span><br></pre></td></tr></table></figure>

<h3 id="查找类加载器"><a href="#查找类加载器" class="headerlink" title="查找类加载器"></a>查找类加载器</h3><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> searchClass = <span class="string">&quot;com.example.Main&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> classLoaders = <span class="title class_">Java</span>.<span class="title function_">enumerateClassLoadersSync</span>();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; classLoaders.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> loader = classLoaders[i]</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        loader.<span class="title function_">findClass</span>(searchClass);</span><br><span class="line">        <span class="title class_">Java</span>.<span class="property">classFactory</span>.<span class="property">loader</span> = loader;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;found class loader:\n&quot;</span> + loader)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">        <span class="keyword">if</span> (error.<span class="property">message</span>.<span class="title function_">includes</span>(<span class="string">&quot;ClassNotFoundException&quot;</span>)) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\n You are trying to load encrypted class, trying next loader&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="Hook不生效"><a href="#Hook不生效" class="headerlink" title="Hook不生效"></a>Hook不生效</h3><p>尝试禁止优化，相关信息:<a href="https://github.com/frida/frida/issues/1395">https://github.com/frida/frida/issues/1395</a></p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">deoptimizeEverything</span>();</span><br></pre></td></tr></table></figure>

<h3 id="无法调用Java对象函数"><a href="#无法调用Java对象函数" class="headerlink" title="无法调用Java对象函数"></a>无法调用Java对象函数</h3><p>先确认<code>javascript</code>的映射对象是否存在这个函数，以下几种方法都可以</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">keys</span>(obj).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(key));</span><br></pre></td></tr></table></figure>

<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertyNames</span>(obj.<span class="property">__proto__</span>).<span class="title function_">join</span>(<span class="string">&#x27;\n\t&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>这里存在两种情况</p>
<ul>
<li><p>不存在函数名</p>
<p>一般对象来自于泛型返回值比如<code>ArrayList</code>这些被自动转型成<code>Object</code>类型强制转换一下实际类型即可</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> networkInterfaces = ...</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">NetworkInterface</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.net.NetworkInterface&#x27;</span>);</span><br><span class="line">networkInterfaces = <span class="title class_">Java</span>.<span class="title function_">cast</span>(networkInterfaces, <span class="title class_">NetworkInterface</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>存在函数名</p>
<p>这种情况一般出现在对象有继承但又未重写该函数的情况,frida调用函数跟java调用函数实际上还是有区别的不能直接调用子类未重写的函数必须强制转换成父类类型才可以调用</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Key</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.security.Key&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Certificate</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.security.cert.Certificate&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> publicKey = <span class="title class_">Java</span>.<span class="title function_">cast</span>(leafCert, <span class="title class_">Certificate</span>).<span class="title function_">getPublicKey</span>();</span><br><span class="line"><span class="keyword">const</span> algorithm = <span class="title class_">Java</span>.<span class="title function_">cast</span>(publicKey, <span class="title class_">Key</span>).<span class="title function_">getAlgorithm</span>();</span><br></pre></td></tr></table></figure>

<p>还有种奇怪的写法之前用过先记录一下,也可以试试</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Enumeration</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.util.Enumeration&#x27;</span>);</span><br><span class="line"><span class="title class_">Enumeration</span>.<span class="property">nextElement</span>.<span class="title function_">call</span>(networkInterfaces);</span><br></pre></td></tr></table></figure></li>
</ul>
<p>如果还不行的话别着急有绝招,借助Java反射调用</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> getPublicKey = leaf.<span class="title function_">getClass</span>().<span class="title function_">getMethod</span>(<span class="string">&quot;getPublicKey&quot;</span>, []);</span><br><span class="line"><span class="keyword">let</span> publicKey = getPublicKey.<span class="title function_">invoke</span>(leaf, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure>

<h3 id="操作Java-long类型数据存在精度问题"><a href="#操作Java-long类型数据存在精度问题" class="headerlink" title="操作Java long类型数据存在精度问题"></a>操作Java long类型数据存在精度问题</h3><p>应将从Java层获取的<code>long</code>类型数据转成<code>string</code>然后放如<code>BigInt</code>类型中</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Long</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&#x27;java.lang.Long&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> l = <span class="title class_">Long</span>.<span class="title function_">parseLong</span>(-<span class="number">5476376641664023184</span>);</span><br><span class="line"><span class="keyword">let</span> newL = <span class="title class_">BigInt</span>(l.<span class="title function_">toString</span>())</span><br></pre></td></tr></table></figure>

<h2 id="更多的用法"><a href="#更多的用法" class="headerlink" title="更多的用法"></a>更多的用法</h2><blockquote>
<p><a href="https://github.com/iddoeldor/frida-snippets/blob/master/README.md">https://github.com/iddoeldor/frida-snippets/blob/master/README.md</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>移动安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Git项目管理</title>
    <url>/2025/07/09/Git%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h2 id="使用Git提交模板"><a href="#使用Git提交模板" class="headerlink" title="使用Git提交模板"></a>使用Git提交模板</h2><ol>
<li><p>项目根目录下创建提交模板</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat &gt; .gitmessage &lt;&lt; &#x27;EOF&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">============= Git 提交信息模板 =============</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">类型（必填）: feat | fix | docs | style | refactor | perf | <span class="built_in">test</span> | chore | ci | build | revert</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">影响范围（可选）: 例如模块、组件或功能（如 <span class="string">&quot;user-auth&quot;</span>, <span class="string">&quot;payment-api&quot;</span>）</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">描述（必填）: 简洁说明本次提交的更改</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--------------------------------------------</span></span><br><span class="line"></span><br><span class="line">&lt;类型&gt;(&lt;影响范围&gt;): &lt;简短描述&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">详细说明（可选）:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">- 为什么进行这次更改？</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">- 解决了什么问题？</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">- 是否有副作用或注意事项？</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关联 Issue 或 Task（可选）:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Fixes <span class="comment">#123</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Closes <span class="comment">#456</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Related to <span class="comment">#789</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-------------------- 示例 --------------------</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">feat(user-auth): 添加 OAuth2 登录支持</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># - 集成 Google 和 GitHub OAuth2 登录</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">- 更新用户模型以存储第三方登录信息</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Fixes #42</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Related to <span class="comment">#56</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">=============================================</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></li>
<li><p>配置当前项目使用模板提交(项目成员都需配置)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --local git commit.template=.gitmessage</span><br></pre></td></tr></table></figure></li>
<li><p>创建强制检查脚本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir .githooks</span><br><span class="line">cat &gt; commit-msg &lt;&lt; &#x27;EOF&#x27;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">MSG_FILE=&quot;$1&quot;</span><br><span class="line">MSG=$(cat &quot;$MSG_FILE&quot;)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查是否包含类型和描述</span></span><br><span class="line">if ! echo &quot;$MSG&quot; | grep -qE &quot;^(feat|fix|docs|style|refactor|perf|test|chore|ci|build|revert)\(.*\): .+&quot;; then</span><br><span class="line">    echo &quot;错误：提交信息不符合规范！&quot;</span><br><span class="line">    echo &quot;示例: feat(user-auth): 添加登录功能&quot;</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line">EOF</span><br><span class="line">chmod +x .githooks/commit-msg</span><br></pre></td></tr></table></figure></li>
<li><p>配置强制检查提交格式(项目成员都需配置)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --local git core.hookspath=.githooks</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>开发实战</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo写作指南</title>
    <url>/2025/02/18/Hexo%E5%86%99%E4%BD%9C%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h2 id="创建草稿文章"><a href="#创建草稿文章" class="headerlink" title="创建草稿文章"></a>创建草稿文章</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new draft &quot;Example&quot;</span><br></pre></td></tr></table></figure>

<p>发布草稿<code>hexo publish draft Example</code></p>
<h2 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new draft &quot;Example&quot;</span><br></pre></td></tr></table></figure>

<h2 id="创建分类"><a href="#创建分类" class="headerlink" title="创建分类"></a>创建分类</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure>

<h2 id="创建tag"><a href="#创建tag" class="headerlink" title="创建tag"></a>创建tag</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工具</category>
      </categories>
  </entry>
  <entry>
    <title>IDA-Pro入门知识</title>
    <url>/2023/12/27/IDA-Pro%E5%85%A5%E9%97%A8%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h2 id="快捷键指南"><a href="#快捷键指南" class="headerlink" title="快捷键指南"></a>快捷键指南</h2><table>
<thead>
<tr>
<th>快捷键</th>
<th>指令</th>
</tr>
</thead>
<tbody><tr>
<td><code>Tab</code></td>
<td>在反汇编视图和伪代码视图之间切换</td>
</tr>
<tr>
<td><code>F5</code></td>
<td>转换为伪代码</td>
</tr>
<tr>
<td><code>N</code></td>
<td>对函数或变量进行重命名</td>
</tr>
<tr>
<td><code>U</code></td>
<td>取消数据定义</td>
</tr>
<tr>
<td><code>C</code></td>
<td>将数据解析为代码</td>
</tr>
<tr>
<td><code>M</code></td>
<td>将当前数据类型转成为枚举成员</td>
</tr>
<tr>
<td><code>Y</code></td>
<td>对函数或变量进行类型定义</td>
</tr>
<tr>
<td><code>G</code></td>
<td>跳转函数地址</td>
</tr>
<tr>
<td><code>/</code></td>
<td>对代码进行注释</td>
</tr>
<tr>
<td><code>X</code></td>
<td>查找函数交叉引用/查找变量的本地引用</td>
</tr>
<tr>
<td><code>Space</code></td>
<td>列表视图与图形视图切换</td>
</tr>
<tr>
<td><code>Shift</code> + <code>F12</code></td>
<td>打开字符串表</td>
</tr>
<tr>
<td><code>Ctrl</code> + <code>Alt</code> + <code>X</code></td>
<td>查找变量全局引用</td>
</tr>
<tr>
<td><code>Ctrl</code> + <code>Shift</code> + <code>W</code></td>
<td>调出数据库快照</td>
</tr>
<tr>
<td><code>Ctrl</code> + <code>Shift</code> + <code>T</code></td>
<td>调出数据库快照管理器</td>
</tr>
<tr>
<td></td>
<td></td>
</tr>
</tbody></table>
<h2 id="数据类型定义"><a href="#数据类型定义" class="headerlink" title="数据类型定义"></a>数据类型定义</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">byte / char / uint8 / int8    -&gt; db 1个字节</span><br><span class="line">word / short / uint16 / int16 -&gt; dw 2个字节</span><br><span class="line">dword / int / uint …         -&gt; dd 4个字节 （32位指针）</span><br><span class="line">qword / int64 …              -&gt; dq 8个字节 （64位指针）</span><br></pre></td></tr></table></figure>

<p>大部分情况下，整数以小端序存储在内存</p>
<p>0xA1B2C3D4 存储到内存的顺序为 D4 C3 B2 A1</p>
<h2 id="前缀说明"><a href="#前缀说明" class="headerlink" title="前缀说明"></a>前缀说明</h2><table>
<thead>
<tr>
<th>前缀</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>sub_</td>
<td>指令和子函数起点</td>
</tr>
<tr>
<td>locret_</td>
<td>返回指令</td>
</tr>
<tr>
<td>loc_</td>
<td>指令</td>
</tr>
<tr>
<td>off_</td>
<td>数据，包含偏移量</td>
</tr>
<tr>
<td>seg_</td>
<td>数据，包含段地址值</td>
</tr>
<tr>
<td>asc_</td>
<td>数据，ASCII字符串</td>
</tr>
<tr>
<td>byte_</td>
<td>数据，字节（或字节数组）</td>
</tr>
<tr>
<td>word_</td>
<td>数据，16位数据（或字数组）</td>
</tr>
<tr>
<td>dword_</td>
<td>数据，32位数据（或双字数组）</td>
</tr>
<tr>
<td>qword_</td>
<td>数据，64位数据（或4字数组）</td>
</tr>
<tr>
<td>flt_</td>
<td>浮点数据，32位（或浮点数组）</td>
</tr>
<tr>
<td>dbl_</td>
<td>浮点数，64位（或双精度数组）</td>
</tr>
<tr>
<td>tbyte_</td>
<td>浮点数，80位（或扩展精度浮点数）</td>
</tr>
<tr>
<td>stru_</td>
<td>结构体(或结构体数组)</td>
</tr>
<tr>
<td>algn_</td>
<td>对齐指示</td>
</tr>
<tr>
<td>unk_</td>
<td>未处理字</td>
</tr>
</tbody></table>
<h2 id="查找函数地址偏移量"><a href="#查找函数地址偏移量" class="headerlink" title="查找函数地址偏移量"></a>查找函数地址偏移量</h2><p>打开<code>Pseudocode</code>窗口在左下角可以找到函数位于文件的地址偏移量</p>
<p><img src="/2023/12/27/IDA-Pro%E5%85%A5%E9%97%A8%E7%9F%A5%E8%AF%86/image-20231227110658934.png" alt="image-20231227110658934"></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>移动安全</tag>
      </tags>
  </entry>
  <entry>
    <title>InputStream无法与BufferReader同时用</title>
    <url>/2020/11/05/InputStream%E6%97%A0%E6%B3%95%E4%B8%8EBufferReader%E5%90%8C%E6%97%B6%E7%94%A8/</url>
    <content><![CDATA[<p>​    前两天客户端这边有一块业务一开始想的是用<code>socket</code>直接跟后端传数据,后来后端觉得基于目前的框架改太麻烦于是协商了一下还是改为HTTP协议,我一想HTTP传过来过我把HTTP的头给忽略掉不就可以了于是直接动手撸了个HTTP服务</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> serverSocket.accept();</span><br><span class="line"></span><br><span class="line"><span class="type">BufferedReader</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream()));</span><br><span class="line">LinkedHashMap&lt;String, String&gt; headerFields = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;String, String&gt;();</span><br><span class="line"><span class="keyword">for</span>(String header; (header = r.readLine()) != <span class="literal">null</span> &amp;&amp; !header.isEmpty();)&#123;</span><br><span class="line">    <span class="comment">//解析HTTP头</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">System.out.println(header)</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> Integer.parseInt(headerFields.get(<span class="string">&quot;Content-Length&quot;</span>));</span><br><span class="line"><span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[length];</span><br><span class="line">socket.getInputStream().read(buffer);</span><br><span class="line"><span class="comment">//处理业务数据</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">out.write(<span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span>.getBytes());</span><br><span class="line">out.write(<span class="string">&quot;\r\n&quot;</span>.getBytes());</span><br><span class="line">out.write(<span class="string">&quot;fuck you\r\n&quot;</span>).getBytes());</span><br><span class="line">out.flush();</span><br><span class="line">socket.close();</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>3分钟撸好信心满满的点了Run按钮,前面HTTP头正确读取出来但是到了<code>socket.getInputStream().read(buffer);</code> 这行就会卡主很奇怪看来看去一脸懵逼反复检查发送的数据和数据长度都没问题,过了很久才怀疑到<code>BufferedReader</code>头上于是跟了一下代码发现这厮会读取超过一行的长度导致之后用原始的<code>InputStream</code>读的时候会超过发送的数据长度导致卡住(其实是在等待客户端发送),后来解析头直接选择一个字节一个字节的读这样就没有问题了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//read header</span></span><br><span class="line">LinkedHashMap&lt;String, String&gt; headerFields = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;String, String&gt;();</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> socket.getInputStream();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> b; (b = in.read()) != -<span class="number">1</span>; )</span><br><span class="line">&#123;</span><br><span class="line">    baos.write(b);</span><br><span class="line">    <span class="keyword">if</span>(b == <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//解析HTTP头</span></span><br><span class="line">    	...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//read body</span></span><br><span class="line"><span class="keyword">if</span>(!headerFields.containsKey(<span class="string">&quot;Content-Length&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>(<span class="string">&quot;request header not specify body length!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[Integer.parseInt(headerFields.get(<span class="string">&quot;Content-Length&quot;</span>))];</span><br><span class="line"><span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> in.read(buffer);</span><br><span class="line"><span class="comment">//处理业务数据</span></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">out.write(<span class="string">&quot;HTTP/1.1 200 OK\r\n&quot;</span>.getBytes());</span><br><span class="line">out.write(<span class="string">&quot;\r\n&quot;</span>.getBytes());</span><br><span class="line">out.write(<span class="string">&quot;fuck you\r\n&quot;</span>).getBytes());</span><br><span class="line">out.flush();</span><br><span class="line">socket.close();</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>疑难杂症</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux上支持拆分窗口的终端</title>
    <url>/2025/02/19/Linux%E4%B8%8A%E6%94%AF%E6%8C%81%E6%8B%86%E5%88%86%E7%AA%97%E5%8F%A3%E7%9A%84%E7%BB%88%E7%AB%AF/</url>
    <content><![CDATA[<p>在Ubuntu中，有几个终端模拟器支持窗口拆分功能，允许你在一个终端窗口内同时显示多个会话。以下是一些常见的支持窗口拆分的终端模拟器：</p>
<ol>
<li><strong>GNOME Terminal</strong>：<ul>
<li>GNOME Terminal本身不直接支持窗口拆分，但你可以使用<code>tmux</code>或<code>screen</code>等终端复用工具来实现窗口拆分功能。</li>
</ul>
</li>
<li><strong>Tilix</strong>：<ul>
<li>Tilix是一个非常强大的终端模拟器，支持平铺式布局和窗口拆分。你可以同时在同一窗口中垂直或水平拆分多个终端会话，非常适合进行多任务操作。</li>
</ul>
</li>
<li><strong>Terminator</strong>：<ul>
<li>Terminator也是一个支持窗口拆分的终端模拟器，它允许你将终端拆分成多个窗格，可以水平或垂直拆分，十分方便进行多任务操作。</li>
</ul>
</li>
<li><strong>Konsole</strong>：<ul>
<li>如果你使用的是KDE桌面环境，Konsole是一个非常好的选择，它也支持窗口拆分功能，用户可以在一个窗口内分屏显示多个终端会话。</li>
</ul>
</li>
<li><strong>Alacritty</strong>：<ul>
<li>Alacritty本身不内置窗口拆分功能，但可以与<code>tmux</code>结合使用，达到类似的效果。Alacritty本身强调速度和简洁性，因此没有过多的图形化界面。</li>
</ul>
</li>
<li><strong>Xterm + tmux/screen</strong>：<ul>
<li>Xterm 是一个轻量级的终端模拟器，虽然它没有直接的窗口拆分功能，但可以与<code>tmux</code>或<code>screen</code>等工具结合使用，提供类似的终端拆分体验。</li>
</ul>
</li>
</ol>
<p>如果你需要一个图形化界面的终端模拟器，<strong>Tilix</strong>和<strong>Terminator</strong>都是非常好的选择。如果你不介意使用命令行工具，结合<code>tmux</code>的任何终端模拟器都能满足拆分窗口的需求。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>奇巧淫技</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript回调函数this指向问题</title>
    <url>/2021/03/01/TypeScript%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0this%E6%8C%87%E5%90%91%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>最近在使用<code>TypeScript</code>开发<code>frida hook</code>时遇到一个问题,当把一个类的函数传给另一个方法作为回调函数时,<code>this</code>指针指向的不是原始类的示例,经过一番搜索发现有很多人也碰到同样的问题所以在此记录一下:<br>出问题的代码:</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> <span class="title class_">SetIntervalTest</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="attr">someNumber</span>: <span class="built_in">number</span> = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">trigger</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="built_in">setInterval</span>(<span class="variable language_">this</span>.<span class="property">setIntervalCallback</span>, <span class="number">400</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">setIntervalCallback</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">someNumber</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure>

<p>改成这样就可以了</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> setIntervalCallback = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">someNumber</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>因为只是为了临时解决业务问题所以暂不深究日后有空再来研究研究</p>
<blockquote>
<p>相关链接:<a href="https://github.com/microsoft/TypeScript/issues/10285">https://github.com/microsoft/TypeScript/issues/10285</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>疑难杂症</tag>
      </tags>
  </entry>
  <entry>
    <title>Typora预览hexo文章图片</title>
    <url>/2024/02/22/Typora%E9%A2%84%E8%A7%88hexo%E6%96%87%E7%AB%A0%E5%9B%BE%E7%89%87/</url>
    <content><![CDATA[<ol>
<li><p>在Typora中设置正确的图片复制路径</p>
<p><img src="/2024/02/22/Typora%E9%A2%84%E8%A7%88hexo%E6%96%87%E7%AB%A0%E5%9B%BE%E7%89%87/image-20240222122541351.png" alt="image-20240222122541351"></p>
</li>
<li><p>在scaffolds/draft.md和scaffolds/post.md中添加<code>typora-root-url</code>这样每次生成的文章中都会自动添加预览目录</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">categories:</span><br><span class="line">tags:</span><br><span class="line">typora-root-url: &#123;&#123; title &#125;&#125;</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：如果文章标题中包含空格hexo默认会使用<code>-</code>替换，但是在<code>typora-root-url</code>需要手动替换。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Xposed为何对京东无法生效</title>
    <url>/2020/11/06/Xposed%E4%B8%BA%E4%BD%95%E5%AF%B9%E4%BA%AC%E4%B8%9C%E6%97%A0%E6%B3%95%E7%94%9F%E6%95%88/</url>
    <content><![CDATA[<p>  前一阵子对京东的一个功能比较好奇于是就有了逆向京东的想法,我熟练的拿起了<code>jadx</code>对京东进行反编译居然没有混淆心中狂喜很快就找到入口点,于是又祭出了<code>Xposed</code>大法飞快的写了个插件Hook了<code>Activity</code>的<code>onCreate</code>方法,我迫不及待的跑了起来结果hook貌似没有生效任何Log都没有输出,反复检查后仍不得其解不过此时的我已心中暗暗猜测京东应该有一些反<code>Xposed</code>的机制,因为之前曾见过”酷安”和”知乎”也有这样的功能,于是又Hook了像<code>Class.forName </code>和<code>ClassLoader.loadClass</code>这样的函数来验证一下我的想法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">XposedHelpers.findAndHookMethod(ClassLoader.class, <span class="string">&quot;loadClass&quot;</span>, String.class, <span class="keyword">new</span> <span class="title class_">XC_MethodHook</span>()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">beforeHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(((String)param.args[<span class="number">0</span>]).startsWith(<span class="string">&quot;de.robv.android.xposed&quot;</span>))</span><br><span class="line">		&#123;</span><br><span class="line">		Log.d(<span class="string">&quot;Kaisar&quot;</span>, <span class="string">&quot;loadclass:&quot;</span> + Arrays.toString(param.args), <span class="keyword">new</span> <span class="title class_">Throwable</span>());</span><br><span class="line">		param.setThrowable(<span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line">XposedHelpers.findAndHookMethod(Class.class, <span class="string">&quot;forName&quot;</span>, String.class, <span class="keyword">new</span> <span class="title class_">XC_MethodHook</span>()</span><br><span class="line">&#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">beforeHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(((String)param.args[<span class="number">0</span>]).startsWith(<span class="string">&quot;de.robv.android.xposed&quot;</span>))</span><br><span class="line">		&#123;</span><br><span class="line">		Log.d(<span class="string">&quot;Kaisar&quot;</span>, <span class="string">&quot;forName:&quot;</span> + Arrays.toString(param.args), <span class="keyword">new</span> <span class="title class_">Throwable</span>());</span><br><span class="line">		param.setThrowable(<span class="keyword">new</span> <span class="title class_">ClassNotFoundException</span>());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>这是抓到的log:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2020-11-06 19:54:14.503 30297-30297/? D/Kaisar: loadclass:[de.robv.android.xposed.XposedBridge]</span><br><span class="line">    java.lang.Throwable</span><br><span class="line">        at com.kaisar.jdplugin.MainPlugin$1.beforeHookedMethod(MainPlugin.java:38)</span><br><span class="line">        at de.robv.android.xposed.XC_MethodHook.callBeforeHookedMethod(XC_MethodHook.java:51)</span><br><span class="line">        at com.swift.sandhook.xposedcompat.hookstub.HookStubManager.hookBridge(HookStubManager.java:281)</span><br><span class="line">        at com.swift.sandhook.xposedcompat.hookstub.MethodHookerStubs32.stub_hook_5(MethodHookerStubs32.java:228)</span><br><span class="line">        at java.lang.Runtime.nativeLoad(Native Method)</span><br><span class="line">        at java.lang.Runtime.loadLibrary0(Runtime.java:1014)</span><br><span class="line">        at java.lang.System.loadLibrary(System.java:1669)</span><br><span class="line">        at com.jingdong.app.mall.JDApp.loadLib(JDApp.java:134)</span><br><span class="line">        at com.jingdong.app.mall.JDApp.&lt;clinit&gt;(Unknown Source:0)</span><br><span class="line">        at java.lang.reflect.Constructor.newInstance0(Native Method)</span><br><span class="line">        at java.lang.reflect.Constructor.newInstance(Constructor.java:343)</span><br><span class="line">        at com.jd.chappie.loader.ChappieApplication.reflectClientApplication(Unknown Source:23)</span><br><span class="line">        at com.jd.chappie.loader.ChappieApplication.attachBaseContext(Unknown Source:3)</span><br><span class="line">        at java.lang.reflect.Method.invoke(Native Method)</span><br><span class="line">        at com.swift.sandhook.SandHook.callOriginMethod(SandHook.java:185)</span><br><span class="line">        at com.swift.sandhook.SandHook.callOriginMethod(SandHook.java:163)</span><br><span class="line">        at com.swift.sandhook.xposedcompat.hookstub.HookStubManager.hookBridge(HookStubManager.java:304)</span><br><span class="line">        at com.swift.sandhook.xposedcompat.hookstub.MethodHookerStubs32.stub_hook_6(MethodHookerStubs32.java:234)</span><br><span class="line">        at android.app.Application.attach(Application.java:212)</span><br><span class="line">        at android.app.Instrumentation.newApplication(Instrumentation.java:1122)</span><br><span class="line">        at android.app.LoadedApk.makeApplication(LoadedApk.java:1052)</span><br><span class="line">        at android.app.ActivityThread.handleBindApplication(ActivityThread.java:5877)</span><br><span class="line">        at java.lang.reflect.Method.invoke(Native Method)</span><br><span class="line">        at com.swift.sandhook.SandHook.callOriginMethod(SandHook.java:185)</span><br><span class="line">        at com.swift.sandhook.SandHook.callOriginMethod(SandHook.java:163)</span><br><span class="line">        at com.swift.sandhook.xposedcompat.hookstub.HookStubManager.hookBridge(HookStubManager.java:304)</span><br><span class="line">        at com.swift.sandhook.xposedcompat.hookstub.MethodHookerStubs32.stub_hook_0(MethodHookerStubs32.java:198)</span><br><span class="line">        at android.app.ActivityThread.access$1100(ActivityThread.java:200)</span><br><span class="line">        at android.app.ActivityThread$H.handleMessage(ActivityThread.java:1660)</span><br><span class="line">        at android.os.Handler.dispatchMessage(Handler.java:106)</span><br><span class="line">        at android.os.Looper.loop(Looper.java:193)</span><br><span class="line">        at android.app.ActivityThread.main(ActivityThread.java:6762)</span><br><span class="line">        at java.lang.reflect.Method.invoke(Native Method)</span><br><span class="line">        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:493)</span><br><span class="line">        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:858)</span><br></pre></td></tr></table></figure>



<p>天网恢恢疏而不漏,结果还真的发现在京东一个<code>so</code>中加载了<code>XposedBridge</code>这个类,京东再怎么说也是购物支付软件反<code>Xposed</code>这点技术肯定还是要做的,没关系既然<code>Xposed</code> hook不了的东西那就自己动手hook一下吧,于是在<code>Application</code>的<code>attachBaseContext</code>方法之前手动Hook了<code>ActivityThread</code>的<code>mH</code>变量中的一些关键函数并且输出一些log</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">XposedHelpers.findAndHookMethod(<span class="string">&quot;com.jd.chappie.loader.ChappieApplication&quot;</span>, lpparam.classLoader, <span class="string">&quot;attachBaseContext&quot;</span>, Context.class, <span class="keyword">new</span> <span class="title class_">XC_MethodHook</span>()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">beforeHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable</span><br><span class="line">    &#123;</span><br><span class="line">        Log.d(<span class="string">&quot;Kaisar&quot;</span>, <span class="string">&quot;attachBaseContext before:&quot;</span> + getClass().getName());</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            Class&lt;?&gt; ActivityThread = Class.forName(<span class="string">&quot;android.app.ActivityThread&quot;</span>);</span><br><span class="line">            <span class="type">Object</span> <span class="variable">currentActivityThread</span> <span class="operator">=</span> ActivityThread.getMethod(<span class="string">&quot;currentActivityThread&quot;</span>).invoke(<span class="literal">null</span>);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">mH</span> <span class="operator">=</span> ActivityThread.getDeclaredField(<span class="string">&quot;mH&quot;</span>);</span><br><span class="line">            mH.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="type">Handler</span> <span class="variable">handler</span> <span class="operator">=</span> (Handler)mH.get(currentActivityThread);</span><br><span class="line">            <span class="type">Field</span> <span class="variable">mCallback</span> <span class="operator">=</span> Handler.class.getDeclaredField(<span class="string">&quot;mCallback&quot;</span>);</span><br><span class="line">            mCallback.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            mCallback.set(handler, <span class="keyword">new</span> <span class="title class_">Handler</span>.Callback()</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">handleMessage</span><span class="params">(<span class="meta">@NonNull</span> Message msg)</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Log.d(<span class="string">&quot;Kaisar&quot;</span>, <span class="string">&quot;handler:&quot;</span> + msg);</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Exception e)</span><br><span class="line">        &#123;</span><br><span class="line">            Log.e(<span class="string">&quot;Kaisar&quot;</span>, <span class="string">&quot;hook handler failed&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">afterHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable</span><br><span class="line">    &#123;</span><br><span class="line">        Log.d(<span class="string">&quot;Kaisar&quot;</span>, <span class="string">&quot;attachBaseContext after:&quot;</span> + getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<p>不过奇怪的事情发生了hook还是没有发生任何作用,按道理来说不通过<code>Xposed</code> hook, 京东是不太容易知道hook了哪些函数,但是竟然没有任何log输出很奇怪,于是我又在<code>attachBaseContext</code>之前启动了一个线程延迟十秒以确保<code>attchBaseContext</code>流程走完检查hook点并输出日志但是更奇怪的是线程延迟了10秒竟还是没有任何输出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">beforeHookedMethod</span><span class="params">(MethodHookParam param)</span> <span class="keyword">throws</span> Throwable</span><br><span class="line">&#123;</span><br><span class="line">    Log.d(<span class="string">&quot;Kaisar&quot;</span>, <span class="string">&quot;attachBaseContext before:&quot;</span> + getClass().getName());</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        Class&lt;?&gt; ActivityThread = Class.forName(<span class="string">&quot;android.app.ActivityThread&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">currentActivityThread</span> <span class="operator">=</span> ActivityThread.getMethod(<span class="string">&quot;currentActivityThread&quot;</span>).invoke(<span class="literal">null</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">mH</span> <span class="operator">=</span> ActivityThread.getDeclaredField(<span class="string">&quot;mH&quot;</span>);</span><br><span class="line">        mH.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Handler</span> <span class="variable">handler</span> <span class="operator">=</span> (Handler)mH.get(currentActivityThread);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">mCallback</span> <span class="operator">=</span> Handler.class.getDeclaredField(<span class="string">&quot;mCallback&quot;</span>);</span><br><span class="line">        mCallback.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        mCallback.set(handler, <span class="keyword">new</span> <span class="title class_">Handler</span>.Callback()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">handleMessage</span><span class="params">(<span class="meta">@NonNull</span> Message msg)</span></span><br><span class="line">            &#123;</span><br><span class="line">                Log.d(<span class="string">&quot;Kaisar&quot;</span>, <span class="string">&quot;handler:&quot;</span> + msg);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        Log.d(<span class="string">&quot;Kaisar&quot;</span>, <span class="string">&quot;hook handler ok&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> mCallback.get(handler);</span><br><span class="line">        Log.d(<span class="string">&quot;Kaisar&quot;</span>, <span class="string">&quot;check handler:&quot;</span> + mCallback.get(handler));</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="keyword">new</span> <span class="title class_">Runnable</span>()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">try</span></span><br><span class="line">                &#123;</span><br><span class="line">                    Log.d(<span class="string">&quot;Kaisar&quot;</span>, <span class="string">&quot;wait delay check handle&quot;</span>);</span><br><span class="line">                    SystemClock.sleep(<span class="number">5000</span>);</span><br><span class="line">                    Log.d(<span class="string">&quot;Kaisar&quot;</span>, <span class="string">&quot;delay check handler:&quot;</span> + mCallback.get(handler));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">catch</span>(Throwable e)</span><br><span class="line">                &#123;</span><br><span class="line">                    Log.e(<span class="string">&quot;Kaisar&quot;</span>, <span class="string">&quot;delay check failed&quot;</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span>(Exception e)</span><br><span class="line">    &#123;</span><br><span class="line">        Log.e(<span class="string">&quot;Kaisar&quot;</span>, <span class="string">&quot;hook handler failed&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>难道说京东竟然可以检测到我开了线程并把我的线程给停掉了? 事情好像没有那么简单了 于是上<code>Xposed</code>开发群里问问大佬看看有没有遇到过结果还真有!</p>
<p>大佬说:<strong>狗东把log给吃了…</strong>  (划重点此题必考) 于是我把打log的地方换成了写文件 果然log有了 WTF 就这么简单? 这你敢信? 我以为用了什么宇宙无敌黑科技 结果就这搞了我几个小时?   卒…</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>移动安全</tag>
        <tag>疑难杂症</tag>
        <tag>Xposed</tag>
      </tags>
  </entry>
  <entry>
    <title>adb shell一些实用的命令</title>
    <url>/2023/03/21/adb-shell%E4%B8%80%E4%BA%9B%E5%AE%9E%E7%94%A8%E7%9A%84%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="重要文件位置"><a href="#重要文件位置" class="headerlink" title="重要文件位置"></a>重要文件位置</h2><h3 id="用户数据-壁纸-系统属性settings命令存储相关的"><a href="#用户数据-壁纸-系统属性settings命令存储相关的" class="headerlink" title="用户数据(壁纸/系统属性settings命令存储相关的)"></a>用户数据(壁纸/系统属性settings命令存储相关的)</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/data/system/users/0</span><br></pre></td></tr></table></figure>

<h2 id="Window相关"><a href="#Window相关" class="headerlink" title="Window相关"></a>Window相关</h2><h3 id="获取当前界面的ui信息"><a href="#获取当前界面的ui信息" class="headerlink" title="获取当前界面的ui信息"></a>获取当前界面的ui信息</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">uiautomator # 可用于自动化操作</span><br></pre></td></tr></table></figure>

<h3 id="获取当前window的view元素"><a href="#获取当前window的view元素" class="headerlink" title="获取当前window的view元素"></a>获取当前window的view元素</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wm dump-visible-window-views # 获取更详细的控件数据可以研究android.view.View#encode源码进行手动解析实现类似于uiautomator功能</span><br></pre></td></tr></table></figure>

<h2 id="Activity相关"><a href="#Activity相关" class="headerlink" title="Activity相关"></a>Activity相关</h2><h3 id="启动Activity前停止app"><a href="#启动Activity前停止app" class="headerlink" title="启动Activity前停止app"></a>启动Activity前停止app</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell am start-activity -S -n com.example.app/.MainActivity</span><br></pre></td></tr></table></figure>

<h3 id="启动activity并等待打开"><a href="#启动activity并等待打开" class="headerlink" title="启动activity并等待打开"></a>启动activity并等待打开</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell am start-activity -W -n com.example.app/.MainActivity</span><br></pre></td></tr></table></figure>

<h2 id="系统属性"><a href="#系统属性" class="headerlink" title="系统属性"></a>系统属性</h2><p>列出存在的属性</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell settings list system</span><br><span class="line">adb shell settings list global</span><br><span class="line">adb shell settings list secure</span><br><span class="line">adb shell getprop</span><br></pre></td></tr></table></figure>

<h2 id="网络相关"><a href="#网络相关" class="headerlink" title="网络相关"></a>网络相关</h2><h3 id="WIFI相关"><a href="#WIFI相关" class="headerlink" title="WIFI相关"></a>WIFI相关</h3><h4 id="开启WIFI"><a href="#开启WIFI" class="headerlink" title="开启WIFI"></a>开启WIFI</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell cmd -w wifi set-wifi-enabled enabled</span><br></pre></td></tr></table></figure>

<h4 id="扫描WIFI"><a href="#扫描WIFI" class="headerlink" title="扫描WIFI"></a>扫描WIFI</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell cmd -w wifi start-scan</span><br></pre></td></tr></table></figure>

<h4 id="列出WIFI扫描结果"><a href="#列出WIFI扫描结果" class="headerlink" title="列出WIFI扫描结果"></a>列出WIFI扫描结果</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell cmd -w wifi list-scan-results</span><br></pre></td></tr></table></figure>

<h4 id="列出当前保存的WIFI列表"><a href="#列出当前保存的WIFI列表" class="headerlink" title="列出当前保存的WIFI列表"></a>列出当前保存的WIFI列表</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell cmd -w wifi list-networks</span><br></pre></td></tr></table></figure>

<h4 id="连接指定的WIFI"><a href="#连接指定的WIFI" class="headerlink" title="连接指定的WIFI"></a>连接指定的WIFI</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell cmd -w wifi connect-network home-wifi wpa2 password</span><br></pre></td></tr></table></figure>

<h4 id="nc命令"><a href="#nc命令" class="headerlink" title="nc命令"></a>nc命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell nc -l -p 8888 # 监听客户端连接</span><br><span class="line">adb shell nc 127.0.0.1 8888 # 连接服务端</span><br></pre></td></tr></table></figure>

<h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><h4 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell settings put global http_proxy 192.168.225.100:3128</span><br><span class="line">adb shell settings put global global_http_proxy_host 192.168.225.100</span><br><span class="line">adb shell settings put global global_http_proxy_port 3128</span><br><span class="line">adb shell settings put global global_http_proxy_username foo</span><br><span class="line">adb shell settings put global global_http_proxy_password bar</span><br></pre></td></tr></table></figure>

<h4 id="移除代理"><a href="#移除代理" class="headerlink" title="移除代理"></a>移除代理</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell settings delete global http_proxy</span><br><span class="line">adb shell settings delete global global_http_proxy_host</span><br><span class="line">adb shell settings delete global global_http_proxy_port</span><br><span class="line">adb shell settings delete global global_http_proxy_username</span><br><span class="line">adb shell settings delete global global_http_proxy_password</span><br><span class="line">adb shell settings delete global global_http_proxy_exclusion_list</span><br><span class="line">adb shell settings delete global global_proxy_pac_url</span><br><span class="line">adb shell reboot</span><br></pre></td></tr></table></figure>

<h2 id="时间相关"><a href="#时间相关" class="headerlink" title="时间相关"></a>时间相关</h2><h3 id="设置时区"><a href="#设置时区" class="headerlink" title="设置时区"></a>设置时区</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell service call alarm 3 s16 America/Phoenix</span><br></pre></td></tr></table></figure>

<h3 id="设置时间"><a href="#设置时间" class="headerlink" title="设置时间"></a>设置时间</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell &quot;su -c date $(date +%m%d%H%M%Y.%S)&quot;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>[!NOTE]</p>
<p>需要root权限</p>
</blockquote>
<h2 id="设备安全"><a href="#设备安全" class="headerlink" title="设备安全"></a>设备安全</h2><h4 id="设置不锁屏"><a href="#设置不锁屏" class="headerlink" title="设置不锁屏"></a>设置不锁屏</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell locksettings set-disabled true</span><br></pre></td></tr></table></figure>

<h4 id="恢复出厂设置"><a href="#恢复出厂设置" class="headerlink" title="恢复出厂设置"></a>恢复出厂设置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">am broadcast -a android.intent.action.FACTORY_RESET -n android/com.android.server.MasterClearReceiver</span><br></pre></td></tr></table></figure>

<h2 id="移动安全相关"><a href="#移动安全相关" class="headerlink" title="移动安全相关"></a>移动安全相关</h2><h3 id="监控目录下文件事件"><a href="#监控目录下文件事件" class="headerlink" title="监控目录下文件事件"></a>监控目录下文件事件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">inotifywait -r -m /path/to/directory # 监控所有事件</span><br><span class="line">inotifywait -r -m -e create /path/to/directory # 监控特定事件</span><br></pre></td></tr></table></figure>

<h3 id="另辟蹊径检测app是否安装"><a href="#另辟蹊径检测app是否安装" class="headerlink" title="另辟蹊径检测app是否安装"></a>另辟蹊径检测app是否安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">stat -c %u /data/data/com.example # 测试在Android11上可用</span><br></pre></td></tr></table></figure>

<h3 id="使用Magisk-root允许所有进程调试"><a href="#使用Magisk-root允许所有进程调试" class="headerlink" title="使用Magisk root允许所有进程调试"></a>使用Magisk root允许所有进程调试</h3><p>参考：<a href="https://danylokos.github.io/0x02/">https://danylokos.github.io/0x02/</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">magisk resetprop ro.debuggable 1</span><br><span class="line">stop; start</span><br></pre></td></tr></table></figure>

<h2 id="系统启动状态"><a href="#系统启动状态" class="headerlink" title="系统启动状态"></a>系统启动状态</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell getprop sys.boot_completed # 等于1时启动完成</span><br><span class="line">adb shell getprop init.svc.bootanim # 等于stopped时开机动画完成</span><br></pre></td></tr></table></figure>

<h2 id="重启zygote进程"><a href="#重启zygote进程" class="headerlink" title="重启zygote进程"></a>重启zygote进程</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell setprop ctl.restart zygote</span><br></pre></td></tr></table></figure>

<h2 id="屏幕相关"><a href="#屏幕相关" class="headerlink" title="屏幕相关"></a>屏幕相关</h2><h3 id="检查是否亮屏"><a href="#检查是否亮屏" class="headerlink" title="检查是否亮屏"></a>检查是否亮屏</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys deviceidle | grep mScreenOn</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys power | grep &quot;Display Power&quot;</span><br></pre></td></tr></table></figure>

<h3 id="显示触摸点"><a href="#显示触摸点" class="headerlink" title="显示触摸点"></a>显示触摸点</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell settings put system show_touches 1</span><br></pre></td></tr></table></figure>

<h3 id="显示触摸位置"><a href="#显示触摸位置" class="headerlink" title="显示触摸位置"></a>显示触摸位置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell settings put system pointer_location 1</span><br></pre></td></tr></table></figure>

<h3 id="录制触屏轨迹"><a href="#录制触屏轨迹" class="headerlink" title="录制触屏轨迹"></a>录制触屏轨迹</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell getevent | grep --line-buffered ^/ | tee /tmp/android-touch-events.log # 录制</span><br><span class="line"></span><br><span class="line">awk &#x27;&#123;printf &quot;%s %d %d %d\n&quot;, substr($1, 1, length($1) -1), strtonum(&quot;0x&quot;$2), strtonum(&quot;0x&quot;$3), strtonum(&quot;0x&quot;$4)&#125;&#x27; /tmp/android-touch-events.log | xargs -l adb shell sendevent # 重放</span><br></pre></td></tr></table></figure>

<h2 id="语言相关"><a href="#语言相关" class="headerlink" title="语言相关"></a>语言相关</h2><h3 id="设置系统语言"><a href="#设置系统语言" class="headerlink" title="设置系统语言"></a>设置系统语言</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell content query --uri content://settings/system --where &quot;name=\&#x27;system_locales\&#x27;&quot;</span><br><span class="line"></span><br><span class="line">adb shell content delete --uri content://settings/system --where &quot;name=\&#x27;system_locales\&#x27;&quot;</span><br><span class="line"></span><br><span class="line">adb shell content insert --uri content://settings/system --bind name:s:system_locales --bind value:s:en-US</span><br><span class="line">adb shell content insert --uri content://settings/system --bind name:s:system_locales --bind value:s:zh-Hant-TW</span><br><span class="line">adb shell content insert --uri content://settings/system --bind name:s:system_locales --bind value:s:zh-Hant-TW,en-US,ja-JP</span><br></pre></td></tr></table></figure>

<h2 id="显示相关"><a href="#显示相关" class="headerlink" title="显示相关"></a>显示相关</h2><h3 id="字体缩放"><a href="#字体缩放" class="headerlink" title="字体缩放"></a>字体缩放</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell settings put system font_scale 0.85 # (small)</span><br><span class="line">adb shell settings put system font_scale 1.0 # (default)</span><br><span class="line">adb shell settings put system font_scale 1.15 # (large)</span><br><span class="line">adb shell settings put system font_scale 1.30 # (largest)</span><br><span class="line">adb shell settings put system font_scale 2.0 # (sizes like this can only be achieved with custom adb setting, not from ui)</span><br></pre></td></tr></table></figure>

<h2 id="窗口管理"><a href="#窗口管理" class="headerlink" title="窗口管理"></a>窗口管理</h2><h3 id="分屏模式Split-screen"><a href="#分屏模式Split-screen" class="headerlink" title="分屏模式Split screen"></a>分屏模式Split screen</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell am start-activity -n com.whatsapp/.Main --windowingMode 3</span><br><span class="line">adb shell am start-activity -n org.telegram.messenger/.DefaultIcon --windowingMode 4</span><br></pre></td></tr></table></figure>

<h3 id="悬浮窗模式Flating-window"><a href="#悬浮窗模式Flating-window" class="headerlink" title="悬浮窗模式Flating window"></a>悬浮窗模式Flating window</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell am start-activity -n com.whatsapp/.Main --windowingMode 5</span><br><span class="line">adb shell am start-activity -n org.telegram.messenger/.DefaultIcon --windowingMode 5</span><br></pre></td></tr></table></figure>

<h2 id="账户相关"><a href="#账户相关" class="headerlink" title="账户相关"></a>账户相关</h2><h3 id="请求同步"><a href="#请求同步" class="headerlink" title="请求同步"></a>请求同步</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">requestsync</span><br></pre></td></tr></table></figure>

<h2 id="输入相关"><a href="#输入相关" class="headerlink" title="输入相关"></a>输入相关</h2><h3 id="keyevent"><a href="#keyevent" class="headerlink" title="keyevent"></a>keyevent</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 --&gt;  &quot;KEYCODE_UNKNOWN&quot; </span><br><span class="line">1 --&gt;  &quot;KEYCODE_MENU&quot; </span><br><span class="line">2 --&gt;  &quot;KEYCODE_SOFT_RIGHT&quot; </span><br><span class="line">3 --&gt;  &quot;KEYCODE_HOME&quot; </span><br><span class="line">4 --&gt;  &quot;KEYCODE_BACK&quot; </span><br><span class="line">5 --&gt;  &quot;KEYCODE_CALL&quot; </span><br><span class="line">6 --&gt;  &quot;KEYCODE_ENDCALL&quot; </span><br><span class="line">7 --&gt;  &quot;KEYCODE_0&quot; </span><br><span class="line">8 --&gt;  &quot;KEYCODE_1&quot; </span><br><span class="line">9 --&gt;  &quot;KEYCODE_2&quot; </span><br><span class="line">10 --&gt;  &quot;KEYCODE_3&quot; </span><br><span class="line">11 --&gt;  &quot;KEYCODE_4&quot; </span><br><span class="line">12 --&gt;  &quot;KEYCODE_5&quot; </span><br><span class="line">13 --&gt;  &quot;KEYCODE_6&quot; </span><br><span class="line">14 --&gt;  &quot;KEYCODE_7&quot; </span><br><span class="line">15 --&gt;  &quot;KEYCODE_8&quot; </span><br><span class="line">16 --&gt;  &quot;KEYCODE_9&quot; </span><br><span class="line">17 --&gt;  &quot;KEYCODE_STAR&quot; </span><br><span class="line">18 --&gt;  &quot;KEYCODE_POUND&quot; </span><br><span class="line">19 --&gt;  &quot;KEYCODE_DPAD_UP&quot; </span><br><span class="line">20 --&gt;  &quot;KEYCODE_DPAD_DOWN&quot; </span><br><span class="line">21 --&gt;  &quot;KEYCODE_DPAD_LEFT&quot; </span><br><span class="line">22 --&gt;  &quot;KEYCODE_DPAD_RIGHT&quot; </span><br><span class="line">23 --&gt;  &quot;KEYCODE_DPAD_CENTER&quot; </span><br><span class="line">24 --&gt;  &quot;KEYCODE_VOLUME_UP&quot; </span><br><span class="line">25 --&gt;  &quot;KEYCODE_VOLUME_DOWN&quot; </span><br><span class="line">26 --&gt;  &quot;KEYCODE_POWER&quot; </span><br><span class="line">27 --&gt;  &quot;KEYCODE_CAMERA&quot; </span><br><span class="line">28 --&gt;  &quot;KEYCODE_CLEAR&quot; </span><br><span class="line">29 --&gt;  &quot;KEYCODE_A&quot; </span><br><span class="line">30 --&gt;  &quot;KEYCODE_B&quot; </span><br><span class="line">31 --&gt;  &quot;KEYCODE_C&quot; </span><br><span class="line">32 --&gt;  &quot;KEYCODE_D&quot; </span><br><span class="line">33 --&gt;  &quot;KEYCODE_E&quot; </span><br><span class="line">34 --&gt;  &quot;KEYCODE_F&quot; </span><br><span class="line">35 --&gt;  &quot;KEYCODE_G&quot; </span><br><span class="line">36 --&gt;  &quot;KEYCODE_H&quot; </span><br><span class="line">37 --&gt;  &quot;KEYCODE_I&quot; </span><br><span class="line">38 --&gt;  &quot;KEYCODE_J&quot; </span><br><span class="line">39 --&gt;  &quot;KEYCODE_K&quot; </span><br><span class="line">40 --&gt;  &quot;KEYCODE_L&quot; </span><br><span class="line">41 --&gt;  &quot;KEYCODE_M&quot; </span><br><span class="line">42 --&gt;  &quot;KEYCODE_N&quot; </span><br><span class="line">43 --&gt;  &quot;KEYCODE_O&quot; </span><br><span class="line">44 --&gt;  &quot;KEYCODE_P&quot; </span><br><span class="line">45 --&gt;  &quot;KEYCODE_Q&quot; </span><br><span class="line">46 --&gt;  &quot;KEYCODE_R&quot; </span><br><span class="line">47 --&gt;  &quot;KEYCODE_S&quot; </span><br><span class="line">48 --&gt;  &quot;KEYCODE_T&quot; </span><br><span class="line">49 --&gt;  &quot;KEYCODE_U&quot; </span><br><span class="line">50 --&gt;  &quot;KEYCODE_V&quot; </span><br><span class="line">51 --&gt;  &quot;KEYCODE_W&quot; </span><br><span class="line">52 --&gt;  &quot;KEYCODE_X&quot; </span><br><span class="line">53 --&gt;  &quot;KEYCODE_Y&quot; </span><br><span class="line">54 --&gt;  &quot;KEYCODE_Z&quot; </span><br><span class="line">55 --&gt;  &quot;KEYCODE_COMMA&quot; </span><br><span class="line">56 --&gt;  &quot;KEYCODE_PERIOD&quot; </span><br><span class="line">57 --&gt;  &quot;KEYCODE_ALT_LEFT&quot; </span><br><span class="line">58 --&gt;  &quot;KEYCODE_ALT_RIGHT&quot; </span><br><span class="line">59 --&gt;  &quot;KEYCODE_SHIFT_LEFT&quot; </span><br><span class="line">60 --&gt;  &quot;KEYCODE_SHIFT_RIGHT&quot; </span><br><span class="line">61 --&gt;  &quot;KEYCODE_TAB&quot; </span><br><span class="line">62 --&gt;  &quot;KEYCODE_SPACE&quot; </span><br><span class="line">63 --&gt;  &quot;KEYCODE_SYM&quot; </span><br><span class="line">64 --&gt;  &quot;KEYCODE_EXPLORER&quot; </span><br><span class="line">65 --&gt;  &quot;KEYCODE_ENVELOPE&quot; </span><br><span class="line">66 --&gt;  &quot;KEYCODE_ENTER&quot; </span><br><span class="line">67 --&gt;  &quot;KEYCODE_DEL&quot; </span><br><span class="line">68 --&gt;  &quot;KEYCODE_GRAVE&quot; </span><br><span class="line">69 --&gt;  &quot;KEYCODE_MINUS&quot; </span><br><span class="line">70 --&gt;  &quot;KEYCODE_EQUALS&quot; </span><br><span class="line">71 --&gt;  &quot;KEYCODE_LEFT_BRACKET&quot; </span><br><span class="line">72 --&gt;  &quot;KEYCODE_RIGHT_BRACKET&quot; </span><br><span class="line">73 --&gt;  &quot;KEYCODE_BACKSLASH&quot; </span><br><span class="line">74 --&gt;  &quot;KEYCODE_SEMICOLON&quot; </span><br><span class="line">75 --&gt;  &quot;KEYCODE_APOSTROPHE&quot; </span><br><span class="line">76 --&gt;  &quot;KEYCODE_SLASH&quot; </span><br><span class="line">77 --&gt;  &quot;KEYCODE_AT&quot; </span><br><span class="line">78 --&gt;  &quot;KEYCODE_NUM&quot; </span><br><span class="line">79 --&gt;  &quot;KEYCODE_HEADSETHOOK&quot; </span><br><span class="line">80 --&gt;  &quot;KEYCODE_FOCUS&quot; </span><br><span class="line">81 --&gt;  &quot;KEYCODE_PLUS&quot; </span><br><span class="line">82 --&gt;  &quot;KEYCODE_MENU&quot; </span><br><span class="line">83 --&gt;  &quot;KEYCODE_NOTIFICATION&quot; </span><br><span class="line">84 --&gt;  &quot;KEYCODE_SEARCH&quot; </span><br><span class="line">85 --&gt;  &quot;TAG_LAST_KEYCODE&quot;</span><br></pre></td></tr></table></figure>

<h2 id="进程相关"><a href="#进程相关" class="headerlink" title="进程相关"></a>进程相关</h2><h3 id="打印进程中的所有线程"><a href="#打印进程中的所有线程" class="headerlink" title="打印进程中的所有线程"></a>打印进程中的所有线程</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ps -Twwww -p &#123;pid&#125;</span><br></pre></td></tr></table></figure>

<h2 id="命令行转义"><a href="#命令行转义" class="headerlink" title="命令行转义"></a>命令行转义</h2><h3 id="解决多层嵌套转义"><a href="#解决多层嵌套转义" class="headerlink" title="解决多层嵌套转义"></a>解决多层嵌套转义</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell su &lt;&lt;-EOF</span><br><span class="line">sed -i &#x27;s/hello&quot; world/hello world/g&#x27; /sdcard/abc</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<p>使用here-doc的机制来避免复杂的命令增加多层转义,<code>EOF</code>前加<code>-</code>号可以确保文本内容使用<code>tab</code>来对齐代码</p>
<h2 id="将aar文件转换成dex文件"><a href="#将aar文件转换成dex文件" class="headerlink" title="将aar文件转换成dex文件"></a>将aar文件转换成dex文件</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">~/Android/Sdk/build-tools/35.0.0/d8 --release demo.aar</span><br></pre></td></tr></table></figure>

<h2 id="查询WebView相关信息"><a href="#查询WebView相关信息" class="headerlink" title="查询WebView相关信息"></a>查询WebView相关信息</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys webviewupdate</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>奇巧淫技</tag>
      </tags>
  </entry>
  <entry>
    <title>adb shell加载termux环境</title>
    <url>/2023/02/27/adb-shell%E5%8A%A0%E8%BD%BDtermux%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<h1 id="Let-adb-shell-use-termux-command"><a href="#Let-adb-shell-use-termux-command" class="headerlink" title="Let adb shell use termux command"></a>Let adb shell use termux command</h1><p>通常我们调试应用的时候喜欢使用debug版rom不仅拥有root权限而且附带许多调试工具如curl、sqlite等，但是某些情况下我们可能不得不选择release版rom来调试由于该版本的特性会缺少很多调试工具使得用起来十分不顺手，因此本文介绍一下如何通过Magisk和termux来增强adb shell的使用体验。</p>
<h2 id="1-Unlock-root-解锁Root权限"><a href="#1-Unlock-root-解锁Root权限" class="headerlink" title="1. Unlock root/解锁Root权限"></a>1. Unlock root/解锁Root权限</h2><p>本篇文章以<a href="https://github.com/topjohnwu/Magisk/releases">Magisk</a> Root为例，但该部分不是本文重点请自行搜索对应机型的安装方法。</p>
<p>另外提一下其他root软件没有经过测试也许有用。</p>
<h2 id="2-Install-termux-terminal-安装Termux终端"><a href="#2-Install-termux-terminal-安装Termux终端" class="headerlink" title="2. Install termux terminal/安装Termux终端"></a>2. Install termux terminal/安装Termux终端</h2><p><a href="https://f-droid.org/en/packages/com.termux/">https://f-droid.org/en/packages/com.termux/</a></p>
<h2 id="3-Let’s-work-adb-shell加载termux环境"><a href="#3-Let’s-work-adb-shell加载termux环境" class="headerlink" title="3. Let’s work/adb shell加载termux环境"></a>3. Let’s work/adb shell加载termux环境</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell</span><br><span class="line">su -c &quot;sed -i &#x27;s/\\(com\\.termux [0-9][0-9]* \\)0/\\11/&#x27; /data/system/packages.list&quot;</span><br><span class="line">run-as com.termux files/usr/bin/bash -c &#x27;export PATH=/data/data/com.termux/files/usr/bin:$PATH; export LD_PRELOAD=/data/data/com.termux/files/usr/lib/libtermux-exec.so; bash -i&#x27;</span><br></pre></td></tr></table></figure>

<p><img src="/2023/02/27/adb-shell%E5%8A%A0%E8%BD%BDtermux%E7%8E%AF%E5%A2%83/image-20240206144911168.png" alt="image-20240206144911168"></p>
<h2 id="4-Let’s-be-lazy-再懒一些使用tsh脚本"><a href="#4-Let’s-be-lazy-再懒一些使用tsh脚本" class="headerlink" title="4. Let’s be lazy/再懒一些使用tsh脚本"></a>4. Let’s be lazy/再懒一些使用tsh脚本</h2><p>这样一个好处就是在同一个shell会话中可以直接使用<code>tsh</code>进入termux环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb shell</span><br><span class="line">curl -L -o /data/local/tmp/tsh https://kaisar.kozow.com/2023/02/27/adb-shell%E5%8A%A0%E8%BD%BDtermux%E7%8E%AF%E5%A2%83/tsh</span><br><span class="line">. /data/local/tmp/tsh</span><br></pre></td></tr></table></figure>

<blockquote>
<p> Reference|引用资料</p>
<p> 1.<a href="https://gist.github.com/rewida17/f8564bee5a196a8f51b98cd2e53813e4">https://gist.github.com/rewida17/f8564bee5a196a8f51b98cd2e53813e4</a></p>
<p> 2.<a href="https://android.stackexchange.com/questions/225260/termux-running-termux-via-adb-without-any-direct-interaction-with-the-device">https://android.stackexchange.com/questions/225260/termux-running-termux-via-adb-without-any-direct-interaction-with-the-device</a></p>
<p> 3.<a href="https://github.com/termux/termux-app/issues/77">https://github.com/termux/termux-app/issues/77</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>奇巧淫技</tag>
      </tags>
  </entry>
  <entry>
    <title>aosp源码漫游</title>
    <url>/2023/11/21/aosp%E6%BA%90%E7%A0%81%E6%BC%AB%E6%B8%B8/</url>
    <content><![CDATA[<h2 id="系统权限定义文件"><a href="#系统权限定义文件" class="headerlink" title="系统权限定义文件"></a>系统权限定义文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">frameworks/base/core/res/AndroidManifest.xml</span><br></pre></td></tr></table></figure>

<h2 id="系统应用源码位置"><a href="#系统应用源码位置" class="headerlink" title="系统应用源码位置"></a>系统应用源码位置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">packages/apps/</span><br></pre></td></tr></table></figure>

<h2 id="系统常用命令源码位置"><a href="#系统常用命令源码位置" class="headerlink" title="系统常用命令源码位置"></a>系统常用命令源码位置</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">frameworks/base/cmds/</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>开发实战</tag>
      </tags>
  </entry>
  <entry>
    <title>ip查询网站</title>
    <url>/2025/07/04/ip%E6%9F%A5%E8%AF%A2%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<h2 id="ipinfo-io"><a href="#ipinfo-io" class="headerlink" title="ipinfo.io"></a>ipinfo.io</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl ipinfo.io</span><br></pre></td></tr></table></figure>

<h2 id="cpi-cc"><a href="#cpi-cc" class="headerlink" title="cpi.cc"></a>cpi.cc</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl cip.cc</span><br></pre></td></tr></table></figure>

<h2 id="ifconfig-me"><a href="#ifconfig-me" class="headerlink" title="ifconfig.me"></a>ifconfig.me</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl ifconfig.me</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>奇巧淫技</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu提升使用体验篇</title>
    <url>/2023/03/21/ubuntu%E6%8F%90%E5%8D%87%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C%E7%AF%87/</url>
    <content><![CDATA[<h2 id="Gnome自用插件"><a href="#Gnome自用插件" class="headerlink" title="Gnome自用插件"></a>Gnome自用插件</h2><ul>
<li><p>Bing壁纸</p>
<p><a href="https://extensions.gnome.org/extension/1262/bing-wallpaper-changer/">https://extensions.gnome.org/extension/1262/bing-wallpaper-changer/</a></p>
</li>
<li><p>Window动画效果</p>
<p><a href="https://extensions.gnome.org/extension/4679/burn-my-windows/">https://extensions.gnome.org/extension/4679/burn-my-windows/</a></p>
</li>
<li><p>窗口最小化神灯效果</p>
<p><a href="https://extensions.gnome.org/extension/3740/compiz-alike-magic-lamp-effect/">https://extensions.gnome.org/extension/3740/compiz-alike-magic-lamp-effect/</a></p>
</li>
<li><p>显示桌面图标</p>
<p><a href="https://extensions.gnome.org/extension/2087/desktop-icons-ng-ding/">https://extensions.gnome.org/extension/2087/desktop-icons-ng-ding/</a></p>
</li>
<li><p>GSConnect多设备同步</p>
<p><a href="https://extensions.gnome.org/extension/1319/gsconnect/">https://extensions.gnome.org/extension/1319/gsconnect/</a></p>
</li>
<li><p>fcitx5输入法美化</p>
<p><a href="https://extensions.gnome.org/extension/261/kimpanel/">https://extensions.gnome.org/extension/261/kimpanel/</a></p>
</li>
<li><p>开启程序坞</p>
<p><a href="https://extensions.gnome.org/extension/1300/ubuntu-dock/">https://extensions.gnome.org/extension/1300/ubuntu-dock/</a></p>
</li>
</ul>
<h2 id="KDE配置相关"><a href="#KDE配置相关" class="headerlink" title="KDE配置相关"></a>KDE配置相关</h2><p>安装<a href="https://extensions.gnome.org/extension/1319/gsconnect/">GSConnect</a>插件后与其他设备配对</p>
<ul>
<li><p>远程锁定/解锁屏幕</p>
<p>设置方式：<code>Mobile Settings</code> -&gt; <code>Connected Device</code> -&gt; <code>Commands</code> 增加以下两项</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/usr/bin/gnome-screensaver-command -l //锁定屏幕</span><br><span class="line">/usr/bin/gnome-screensaver-command -d //解锁屏幕</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="系统快捷键"><a href="#系统快捷键" class="headerlink" title="系统快捷键"></a>系统快捷键</h2><p>设置方式：<code>Settings</code> -&gt; <code>Keyboard</code> -&gt; <code>View and Customize Shortcuts</code> -&gt; <code>Custom Shortcuts</code></p>
<ul>
<li><p>快速打开<code>scrcpy</code></p>
<ol>
<li><p>添加打开第一台设备快捷键</p>
<p> Name: <code>Scrcpy#1</code></p>
<p> Command: <code>bash -c &quot;scrcpy -s $(adb devices | grep -sw &quot;device&quot; | awk &#39;NR==1 &#123;print $1&#125;&#39;)&quot;</code></p>
<p> Shortcut: <code>Ctrl</code> + <code>1</code></p>
</li>
<li><p>添加打开第二台设备快捷键</p>
<p> Name: <code>Scrcpy#2</code></p>
<p> Command: <code>bash -c &quot;scrcpy -s $(adb devices | grep -sw &quot;device&quot; | awk &#39;NR==2 &#123;print $1&#125;&#39;)&quot;</code></p>
<p> Shortcut: <code>Ctrl</code> + <code>2</code></p>
</li>
<li><p>添加自动检测快捷键</p>
<p> Name: <code>Scrcpy#~</code></p>
<p> Command: <code>/usr/bin/scrcpy-auto-detect</code></p>
<p> Shortcut: <code>Ctrl + ~</code></p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取所有已连接的设备（状态为 <span class="string">&quot;device&quot;</span> 的）</span></span><br><span class="line">devices=$(adb devices | grep -sw &quot;device&quot; | awk &#x27;&#123;print $1&#125;&#x27;)</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果没有设备，提示并退出</span></span><br><span class="line">if [ -z &quot;$devices&quot; ]; then</span><br><span class="line">    zenity --error --text=&quot;没有找到已连接的 Android 设备！&quot; --width=200</span><br><span class="line">    exit 1</span><br><span class="line">fi</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果只有一个设备，直接连接</span></span><br><span class="line">if [ $(echo &quot;$devices&quot; | wc -l) -eq 1 ]; then</span><br><span class="line">    scrcpy -s &quot;$devices&quot;</span><br><span class="line">else</span><br><span class="line">    # 如果有多个设备，使用 zenity 弹出选择对话框</span><br><span class="line">    selected_device=$(zenity --list \</span><br><span class="line">        --title=&quot;选择 Android 设备&quot; \</span><br><span class="line">        --text=&quot;检测到多个设备，请选择要连接的设备：&quot; \</span><br><span class="line">        --column=&quot;设备 ID&quot; $devices)</span><br><span class="line"></span><br><span class="line">    # 如果用户选择了设备，则连接</span><br><span class="line">    if [ -n &quot;$selected_device&quot; ]; then</span><br><span class="line">        scrcpy -s &quot;$selected_device&quot;</span><br><span class="line">    fi</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p> 将以上脚本内容保存到<code>/usr/bin/scrcpy-auto-detect</code></p>
</li>
</ol>
</li>
<li><p>将最近使用的<code>terminal</code>显示在前台（避免打开过多的窗口导致桌面混乱）</p>
<ol>
<li><p>执行<code>sudo apt install xdotool</code>安装软件包</p>
</li>
<li><p>将以下脚本保存到<code>~/bin/call-recent-terminal</code>下并追加执行可执行权限</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">if ! which xdotool &gt; /dev/null 2&gt;&amp;1; then</span><br><span class="line">  echo &quot;You need to install xdotool package first.&quot;</span><br><span class="line">  echo &quot;sudo apt-get install xdotool&quot;</span><br><span class="line">  exit 1</span><br><span class="line">fi</span><br><span class="line">if [[ $(pgrep -x x-terminal-emul) ]]; then</span><br><span class="line">  xdotool windowactivate `xdotool search --pid $(pgrep -x x-terminal-emul) | tail -1` </span><br><span class="line">else</span><br><span class="line">  x-terminal-emulator</span><br><span class="line">fi</span><br></pre></td></tr></table></figure></li>
<li><p>添加自定义快捷键</p>
<p> Name: <code>Launch recent terminal</code></p>
<p> Command: <code>~/bin/call-recent-terminal</code></p>
<p> Shortcut:<code>Ctrl</code> + <code>Alt</code> + <code>R</code></p>
</li>
</ol>
</li>
<li><p>交互式截屏（类似于微信）</p>
<ol>
<li><p>安装软件包<code>sudo apt install flameshot</code></p>
</li>
<li><p>添加自定义快捷键</p>
<p> Name: <code>Take a screenshot interactively plus</code></p>
<p> Command: <code>/usr/bin/flameshot gui</code></p>
<p> Shortcut:<code>Shift</code> + <code>Ctrl</code> + <code>Alt</code> + <code>T</code></p>
</li>
</ol>
</li>
<li><p>扫描屏幕二维码</p>
<ol>
<li><p>安装软件包<code>sudo apt install flameshot</code></p>
</li>
<li><p>添加自定义快捷键</p>
<p>Name: <code>Scan QR Code</code></p>
<p>Command: <code>bash -c &#39;qrcode_content=$(flameshot gui -r | zbarimg -1q --raw - 2&gt;/dev/null); if [ -n &quot;$qrcode_content&quot; ]; then echo &quot;$qrcode_content&quot; | xclip -selection clipboard &amp;&amp; notify-send -i &quot;dialog-information&quot; &quot;二维码识别成功&quot; &quot;已复制到剪贴板：\n$qrcode_content&quot;; else notify-send -i &quot;dialog-error&quot; &quot;二维码识别失败&quot; &quot;未检测到二维码！&quot;; fi&#39;</code></p>
<p>Shortcut: <code>Ctrl</code> + <code>Alt</code> + <code>Q</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">qrcode_content=$(flameshot gui -r | zbarimg -1q --raw - 2&gt;/dev/null)</span><br><span class="line">if [ -n &quot;$qrcode_content&quot; ]; then</span><br><span class="line">    echo &quot;$qrcode_content&quot; | xclip -selection clipboard</span><br><span class="line">    notify-send -i &quot;dialog-information&quot; &quot;二维码识别成功&quot; &quot;已复制到剪贴板：\n$qrcode_content&quot;</span><br><span class="line">else</span><br><span class="line">    notify-send -i &quot;dialog-error&quot; &quot;二维码识别失败&quot; &quot;未检测到二维码！&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<p>或者保存以上内容到<code>/usr/bin/qrscan</code>然后替换快捷键命令路径</p>
</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>奇巧淫技</tag>
      </tags>
  </entry>
  <entry>
    <title>不通过文件转储直接从adb shell读取stdout数据</title>
    <url>/2020/08/04/%E4%B8%8D%E9%80%9A%E8%BF%87%E6%96%87%E4%BB%B6%E8%BD%AC%E5%82%A8%E7%9B%B4%E6%8E%A5%E4%BB%8Eadb-shell%E8%AF%BB%E5%8F%96stdout%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<p>通常我们从Android设备中捕获当前UI界面信息使用以下命令:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb shell uiautomator dump /sdcard/screen.xml</span><br><span class="line">adb pull /sdcard/screen.xml</span><br></pre></td></tr></table></figure>
<p>在上面的代码块中我们经历了两个步骤</p>
<ol>
<li><p>执行命令结果输出到<code>/sdcard/screen.xml</code></p>
</li>
<li><p>拉取设备上的文件</p>
</li>
</ol>
<p>从效率上来看是很慢的那有没有比较快的办法呢? 答案是有的!<br>我们可以利用<code>/dev/tty</code>设备让它直接输出到<code>stdout</code>上这样就省去文件转储了</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell uiautomator dump /dev/tty</span><br></pre></td></tr></table></figure>
<p>你满怀期待着等着结果只看到</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">UI hierchary dumped to: /dev/tty</span><br></pre></td></tr></table></figure>
<p>WTF? 这是什么鬼dump出来的信息去哪了?眉头一紧事情好像貌似没有这么简单…<br>经过一番研究发现我们使用的<code>adb shell</code>会将命令输出发给<code>pty</code>经过一顿骚操作<code>pty</code>把数据搞丢了,所以在新版的<code>adb</code>中引入了一个新的功能<code>exec-out</code>该参数可以将二进制数据直接原封不动的输出。详情请参考<a href="https://android.googlesource.com/platform/system/core/+/5d9d434efadf1c535c7fea634d5306e18c68ef1f"></a></p>
<p>所以只需要将命令改成这样即可:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb exec-out &#x27;uiautomator dump /dev/tty 1&gt;/dev/null&#x27;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>奇巧淫技</tag>
      </tags>
  </entry>
  <entry>
    <title>使用openstf部署一套内部测试平台</title>
    <url>/2020/10/29/%E4%BD%BF%E7%94%A8openstf%E9%83%A8%E7%BD%B2%E4%B8%80%E5%A5%97%E5%86%85%E9%83%A8%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0/</url>
    <content><![CDATA[<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><ul>
<li>Ubuntu20.04</li>
<li>Docker 19.03.13 #务必从<a href="https://docs.docker.com/engine/install/ubuntu/">官方</a>渠道安装否则用自带可能会遇到莫名其妙的问题<ul>
<li><a href="https://registry.hub.docker.com/_/rethinkdb">rethinkdb</a></li>
<li><a href="https://registry.hub.docker.com/r/sorccu/adb">sorccu/adb</a></li>
<li><a href="https://registry.hub.docker.com/r/devicefarmer/stf">devicefarmer/stf</a> 镜像(该版本为开发活跃的分叉)</li>
</ul>
</li>
</ul>
<h2 id="安装openstf"><a href="#安装openstf" class="headerlink" title="安装openstf"></a>安装openstf</h2><ol>
<li><code>sudo docker pull rethinkdb:latest</code> # 拉取rethinkdb 镜像</li>
<li><code>sudo docker pull sorccu/adb:latest </code># 拉取android adb 镜像</li>
<li><code>sudo docker pull devicefarmer/stf:latest</code> #拉取openstf 镜像</li>
</ol>
<h2 id="部署openstf"><a href="#部署openstf" class="headerlink" title="部署openstf"></a>部署openstf</h2><p>openstf部署方式有两种</p>
<ol>
<li>集中管理: openstf管理平台所连接的设备在一台机器上</li>
</ol>
<p><img src="https://mermaid.ink/img/eyJjb2RlIjoiZ3JhcGggVERcbiAgIEFbT3BlblNURi3mnLrlmahBXSAtLT4gQihEZXZpY2UpXG4gICBBW09wZW5TVEYt5py65ZmoQV0gLS0-IEMoRGV2aWNlKVxuICAgQVtPcGVuU1RGLeacuuWZqEFdIC0tPiBEKERldmljZSlcbiAgIEFbT3BlblNURi3mnLrlmahBXSAtLT4gRShEZXZpY2UpXG4gICBBW09wZW5TVEYt5py65ZmoQV0gLS0-IEYoRGV2aWNlKVxuICAgQVtPcGVuU1RGLeacuuWZqEFdIC0tPiBIKC4uLikiLCJtZXJtYWlkIjp7InRoZW1lIjoiZGVmYXVsdCIsInRoZW1lVmFyaWFibGVzIjp7ImJhY2tncm91bmQiOiJ3aGl0ZSIsInByaW1hcnlDb2xvciI6IiNFQ0VDRkYiLCJzZWNvbmRhcnlDb2xvciI6IiNmZmZmZGUiLCJ0ZXJ0aWFyeUNvbG9yIjoiaHNsKDgwLCAxMDAlLCA5Ni4yNzQ1MDk4MDM5JSkiLCJwcmltYXJ5Qm9yZGVyQ29sb3IiOiJoc2woMjQwLCA2MCUsIDg2LjI3NDUwOTgwMzklKSIsInNlY29uZGFyeUJvcmRlckNvbG9yIjoiaHNsKDYwLCA2MCUsIDgzLjUyOTQxMTc2NDclKSIsInRlcnRpYXJ5Qm9yZGVyQ29sb3IiOiJoc2woODAsIDYwJSwgODYuMjc0NTA5ODAzOSUpIiwicHJpbWFyeVRleHRDb2xvciI6IiMxMzEzMDAiLCJzZWNvbmRhcnlUZXh0Q29sb3IiOiIjMDAwMDIxIiwidGVydGlhcnlUZXh0Q29sb3IiOiJyZ2IoOS41MDAwMDAwMDAxLCA5LjUwMDAwMDAwMDEsIDkuNTAwMDAwMDAwMSkiLCJsaW5lQ29sb3IiOiIjMzMzMzMzIiwidGV4dENvbG9yIjoiIzMzMyIsIm1haW5Ca2ciOiIjRUNFQ0ZGIiwic2Vjb25kQmtnIjoiI2ZmZmZkZSIsImJvcmRlcjEiOiIjOTM3MERCIiwiYm9yZGVyMiI6IiNhYWFhMzMiLCJhcnJvd2hlYWRDb2xvciI6IiMzMzMzMzMiLCJmb250RmFtaWx5IjoiXCJ0cmVidWNoZXQgbXNcIiwgdmVyZGFuYSwgYXJpYWwiLCJmb250U2l6ZSI6IjE2cHgiLCJsYWJlbEJhY2tncm91bmQiOiIjZThlOGU4Iiwibm9kZUJrZyI6IiNFQ0VDRkYiLCJub2RlQm9yZGVyIjoiIzkzNzBEQiIsImNsdXN0ZXJCa2ciOiIjZmZmZmRlIiwiY2x1c3RlckJvcmRlciI6IiNhYWFhMzMiLCJkZWZhdWx0TGlua0NvbG9yIjoiIzMzMzMzMyIsInRpdGxlQ29sb3IiOiIjMzMzIiwiZWRnZUxhYmVsQmFja2dyb3VuZCI6IiNlOGU4ZTgiLCJhY3RvckJvcmRlciI6ImhzbCgyNTkuNjI2MTY4MjI0MywgNTkuNzc2NTM2MzEyOCUsIDg3LjkwMTk2MDc4NDMlKSIsImFjdG9yQmtnIjoiI0VDRUNGRiIsImFjdG9yVGV4dENvbG9yIjoiYmxhY2siLCJhY3RvckxpbmVDb2xvciI6ImdyZXkiLCJzaWduYWxDb2xvciI6IiMzMzMiLCJzaWduYWxUZXh0Q29sb3IiOiIjMzMzIiwibGFiZWxCb3hCa2dDb2xvciI6IiNFQ0VDRkYiLCJsYWJlbEJveEJvcmRlckNvbG9yIjoiaHNsKDI1OS42MjYxNjgyMjQzLCA1OS43NzY1MzYzMTI4JSwgODcuOTAxOTYwNzg0MyUpIiwibGFiZWxUZXh0Q29sb3IiOiJibGFjayIsImxvb3BUZXh0Q29sb3IiOiJibGFjayIsIm5vdGVCb3JkZXJDb2xvciI6IiNhYWFhMzMiLCJub3RlQmtnQ29sb3IiOiIjZmZmNWFkIiwibm90ZVRleHRDb2xvciI6ImJsYWNrIiwiYWN0aXZhdGlvbkJvcmRlckNvbG9yIjoiIzY2NiIsImFjdGl2YXRpb25Ca2dDb2xvciI6IiNmNGY0ZjQiLCJzZXF1ZW5jZU51bWJlckNvbG9yIjoid2hpdGUiLCJzZWN0aW9uQmtnQ29sb3IiOiJyZ2JhKDEwMiwgMTAyLCAyNTUsIDAuNDkpIiwiYWx0U2VjdGlvbkJrZ0NvbG9yIjoid2hpdGUiLCJzZWN0aW9uQmtnQ29sb3IyIjoiI2ZmZjQwMCIsInRhc2tCb3JkZXJDb2xvciI6IiM1MzRmYmMiLCJ0YXNrQmtnQ29sb3IiOiIjOGE5MGRkIiwidGFza1RleHRMaWdodENvbG9yIjoid2hpdGUiLCJ0YXNrVGV4dENvbG9yIjoid2hpdGUiLCJ0YXNrVGV4dERhcmtDb2xvciI6ImJsYWNrIiwidGFza1RleHRPdXRzaWRlQ29sb3IiOiJibGFjayIsInRhc2tUZXh0Q2xpY2thYmxlQ29sb3IiOiIjMDAzMTYzIiwiYWN0aXZlVGFza0JvcmRlckNvbG9yIjoiIzUzNGZiYyIsImFjdGl2ZVRhc2tCa2dDb2xvciI6IiNiZmM3ZmYiLCJncmlkQ29sb3IiOiJsaWdodGdyZXkiLCJkb25lVGFza0JrZ0NvbG9yIjoibGlnaHRncmV5IiwiZG9uZVRhc2tCb3JkZXJDb2xvciI6ImdyZXkiLCJjcml0Qm9yZGVyQ29sb3IiOiIjZmY4ODg4IiwiY3JpdEJrZ0NvbG9yIjoicmVkIiwidG9kYXlMaW5lQ29sb3IiOiJyZWQiLCJsYWJlbENvbG9yIjoiYmxhY2siLCJlcnJvckJrZ0NvbG9yIjoiIzU1MjIyMiIsImVycm9yVGV4dENvbG9yIjoiIzU1MjIyMiIsImNsYXNzVGV4dCI6IiMxMzEzMDAiLCJmaWxsVHlwZTAiOiIjRUNFQ0ZGIiwiZmlsbFR5cGUxIjoiI2ZmZmZkZSIsImZpbGxUeXBlMiI6ImhzbCgzMDQsIDEwMCUsIDk2LjI3NDUwOTgwMzklKSIsImZpbGxUeXBlMyI6ImhzbCgxMjQsIDEwMCUsIDkzLjUyOTQxMTc2NDclKSIsImZpbGxUeXBlNCI6ImhzbCgxNzYsIDEwMCUsIDk2LjI3NDUwOTgwMzklKSIsImZpbGxUeXBlNSI6ImhzbCgtNCwgMTAwJSwgOTMuNTI5NDExNzY0NyUpIiwiZmlsbFR5cGU2IjoiaHNsKDgsIDEwMCUsIDk2LjI3NDUwOTgwMzklKSIsImZpbGxUeXBlNyI6ImhzbCgxODgsIDEwMCUsIDkzLjUyOTQxMTc2NDclKSJ9fSwidXBkYXRlRWRpdG9yIjpmYWxzZX0"></p>
   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -d --name rethinkdb -v /srv/rethinkdb:/data --net host rethinkdb rethinkdb --<span class="built_in">bind</span> all --cache-size 8192 --http-port 8090</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -d --name adbd --privileged -v /dev/bus/usb:/dev/bus/usb --net host sorccu/adb:latest</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -d --name stf --net host devicefarmer/stf stf <span class="built_in">local</span> --public-ip <span class="variable">$&#123;你的ip&#125;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>优点:简单快捷适合小规模部署</li>
<li>缺点:不够灵活且单台机器挂载能有限</li>
</ul>
<ol start="2">
<li>分布式管理: openstf提供了provider模式可以用来进行分布式部署</li>
</ol>
<p><img src="https://mermaid.ink/img/eyJjb2RlIjoiZ3JhcGggVERcbkFbT3BlblNURi3mnLrlmahBXSAtLT4gQihQcm92aWRlciBOb2RlKVxuQihQcm92aWRlciBOb2RlLeacuuWZqEIpIC0tPiBCMShEZXZpY2UpXG5CKFByb3ZpZGVyIE5vZGUt5py65ZmoQikgLS0-IEIyKERldmljZSlcbkIoUHJvdmlkZXIgTm9kZS3mnLrlmahCKSAtLT4gQjMoLi4uKVxuQVtPcGVuU1RGLeacuuWZqEFdIC0tPiBDKFByb3ZpZGVyIE5vZGUpXG5DKFByb3ZpZGVyIE5vZGUt5py65ZmoQykgLS0-IEMxKERldmljZSlcbkMoUHJvdmlkZXIgTm9kZS3mnLrlmahDKSAtLT4gQzIoRGV2aWNlKVxuQyhQcm92aWRlciBOb2RlLeacuuWZqEMpIC0tPiBDMyguLi4pXG5BW09wZW5TVEYt5py65ZmoQV0gLS0-IEQoUHJvdmlkZXIgTm9kZSlcbkQoUHJvdmlkZXIgTm9kZS3mnLrlmahEKSAtLT4gRDEoRGV2aWNlKVxuRChQcm92aWRlciBOb2RlLeacuuWZqEQpIC0tPiBEMihEZXZpY2UpXG5EKFByb3ZpZGVyIE5vZGUt5py65ZmoRCkgLS0-IEQzKC4uLikiLCJtZXJtYWlkIjp7InRoZW1lIjoiZGVmYXVsdCIsInRoZW1lVmFyaWFibGVzIjp7ImJhY2tncm91bmQiOiJ3aGl0ZSIsInByaW1hcnlDb2xvciI6IiNFQ0VDRkYiLCJzZWNvbmRhcnlDb2xvciI6IiNmZmZmZGUiLCJ0ZXJ0aWFyeUNvbG9yIjoiaHNsKDgwLCAxMDAlLCA5Ni4yNzQ1MDk4MDM5JSkiLCJwcmltYXJ5Qm9yZGVyQ29sb3IiOiJoc2woMjQwLCA2MCUsIDg2LjI3NDUwOTgwMzklKSIsInNlY29uZGFyeUJvcmRlckNvbG9yIjoiaHNsKDYwLCA2MCUsIDgzLjUyOTQxMTc2NDclKSIsInRlcnRpYXJ5Qm9yZGVyQ29sb3IiOiJoc2woODAsIDYwJSwgODYuMjc0NTA5ODAzOSUpIiwicHJpbWFyeVRleHRDb2xvciI6IiMxMzEzMDAiLCJzZWNvbmRhcnlUZXh0Q29sb3IiOiIjMDAwMDIxIiwidGVydGlhcnlUZXh0Q29sb3IiOiJyZ2IoOS41MDAwMDAwMDAxLCA5LjUwMDAwMDAwMDEsIDkuNTAwMDAwMDAwMSkiLCJsaW5lQ29sb3IiOiIjMzMzMzMzIiwidGV4dENvbG9yIjoiIzMzMyIsIm1haW5Ca2ciOiIjRUNFQ0ZGIiwic2Vjb25kQmtnIjoiI2ZmZmZkZSIsImJvcmRlcjEiOiIjOTM3MERCIiwiYm9yZGVyMiI6IiNhYWFhMzMiLCJhcnJvd2hlYWRDb2xvciI6IiMzMzMzMzMiLCJmb250RmFtaWx5IjoiXCJ0cmVidWNoZXQgbXNcIiwgdmVyZGFuYSwgYXJpYWwiLCJmb250U2l6ZSI6IjE2cHgiLCJsYWJlbEJhY2tncm91bmQiOiIjZThlOGU4Iiwibm9kZUJrZyI6IiNFQ0VDRkYiLCJub2RlQm9yZGVyIjoiIzkzNzBEQiIsImNsdXN0ZXJCa2ciOiIjZmZmZmRlIiwiY2x1c3RlckJvcmRlciI6IiNhYWFhMzMiLCJkZWZhdWx0TGlua0NvbG9yIjoiIzMzMzMzMyIsInRpdGxlQ29sb3IiOiIjMzMzIiwiZWRnZUxhYmVsQmFja2dyb3VuZCI6IiNlOGU4ZTgiLCJhY3RvckJvcmRlciI6ImhzbCgyNTkuNjI2MTY4MjI0MywgNTkuNzc2NTM2MzEyOCUsIDg3LjkwMTk2MDc4NDMlKSIsImFjdG9yQmtnIjoiI0VDRUNGRiIsImFjdG9yVGV4dENvbG9yIjoiYmxhY2siLCJhY3RvckxpbmVDb2xvciI6ImdyZXkiLCJzaWduYWxDb2xvciI6IiMzMzMiLCJzaWduYWxUZXh0Q29sb3IiOiIjMzMzIiwibGFiZWxCb3hCa2dDb2xvciI6IiNFQ0VDRkYiLCJsYWJlbEJveEJvcmRlckNvbG9yIjoiaHNsKDI1OS42MjYxNjgyMjQzLCA1OS43NzY1MzYzMTI4JSwgODcuOTAxOTYwNzg0MyUpIiwibGFiZWxUZXh0Q29sb3IiOiJibGFjayIsImxvb3BUZXh0Q29sb3IiOiJibGFjayIsIm5vdGVCb3JkZXJDb2xvciI6IiNhYWFhMzMiLCJub3RlQmtnQ29sb3IiOiIjZmZmNWFkIiwibm90ZVRleHRDb2xvciI6ImJsYWNrIiwiYWN0aXZhdGlvbkJvcmRlckNvbG9yIjoiIzY2NiIsImFjdGl2YXRpb25Ca2dDb2xvciI6IiNmNGY0ZjQiLCJzZXF1ZW5jZU51bWJlckNvbG9yIjoid2hpdGUiLCJzZWN0aW9uQmtnQ29sb3IiOiJyZ2JhKDEwMiwgMTAyLCAyNTUsIDAuNDkpIiwiYWx0U2VjdGlvbkJrZ0NvbG9yIjoid2hpdGUiLCJzZWN0aW9uQmtnQ29sb3IyIjoiI2ZmZjQwMCIsInRhc2tCb3JkZXJDb2xvciI6IiM1MzRmYmMiLCJ0YXNrQmtnQ29sb3IiOiIjOGE5MGRkIiwidGFza1RleHRMaWdodENvbG9yIjoid2hpdGUiLCJ0YXNrVGV4dENvbG9yIjoid2hpdGUiLCJ0YXNrVGV4dERhcmtDb2xvciI6ImJsYWNrIiwidGFza1RleHRPdXRzaWRlQ29sb3IiOiJibGFjayIsInRhc2tUZXh0Q2xpY2thYmxlQ29sb3IiOiIjMDAzMTYzIiwiYWN0aXZlVGFza0JvcmRlckNvbG9yIjoiIzUzNGZiYyIsImFjdGl2ZVRhc2tCa2dDb2xvciI6IiNiZmM3ZmYiLCJncmlkQ29sb3IiOiJsaWdodGdyZXkiLCJkb25lVGFza0JrZ0NvbG9yIjoibGlnaHRncmV5IiwiZG9uZVRhc2tCb3JkZXJDb2xvciI6ImdyZXkiLCJjcml0Qm9yZGVyQ29sb3IiOiIjZmY4ODg4IiwiY3JpdEJrZ0NvbG9yIjoicmVkIiwidG9kYXlMaW5lQ29sb3IiOiJyZWQiLCJsYWJlbENvbG9yIjoiYmxhY2siLCJlcnJvckJrZ0NvbG9yIjoiIzU1MjIyMiIsImVycm9yVGV4dENvbG9yIjoiIzU1MjIyMiIsImNsYXNzVGV4dCI6IiMxMzEzMDAiLCJmaWxsVHlwZTAiOiIjRUNFQ0ZGIiwiZmlsbFR5cGUxIjoiI2ZmZmZkZSIsImZpbGxUeXBlMiI6ImhzbCgzMDQsIDEwMCUsIDk2LjI3NDUwOTgwMzklKSIsImZpbGxUeXBlMyI6ImhzbCgxMjQsIDEwMCUsIDkzLjUyOTQxMTc2NDclKSIsImZpbGxUeXBlNCI6ImhzbCgxNzYsIDEwMCUsIDk2LjI3NDUwOTgwMzklKSIsImZpbGxUeXBlNSI6ImhzbCgtNCwgMTAwJSwgOTMuNTI5NDExNzY0NyUpIiwiZmlsbFR5cGU2IjoiaHNsKDgsIDEwMCUsIDk2LjI3NDUwOTgwMzklKSIsImZpbGxUeXBlNyI6ImhzbCgxODgsIDEwMCUsIDkzLjUyOTQxMTc2NDclKSJ9fX0"></p>
<p>   需要准备两台机器A,B 在机器A上部署OpenSTF管理平台</p>
   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -d --name rethinkdb -v /srv/rethinkdb:/data --net host rethinkdb rethinkdb --<span class="built_in">bind</span> all --cache-size 8192 --http-port 8090</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -d --name adbd --privileged -v /dev/bus/usb:/dev/bus/usb --net host sorccu/adb:latest</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -d --name stf --net host devicefarmer/stf stf <span class="built_in">local</span> --public-ip <span class="variable">$&#123;你的ip&#125;</span> --bind-dev-pub=<span class="string">&quot;tcp://0.0.0.0:7114&quot;</span> --bind-dev-pull=<span class="string">&quot;tcp://0.0.0.0:7116&quot;</span> --allow-remote</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><strong>注意事项</strong>:</p>
</blockquote>
   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">--bind-dev-pub=&quot;tcp://0.0.0.0:7114&quot; --bind-dev-pull=&quot;tcp://0.0.0.0:7116&quot;</span><br></pre></td></tr></table></figure>
<p><strong>这行一定要加否则服务将监听在127.0.0.1地址上会导致provider节点无法连接之前没加导致排查了很久</strong></p>
<p>在机器B上部署Provider节点</p>
   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -d --name adbd --privileged -v /dev/bus/usb:/dev/bus/usb --net host sorccu/adb:latest</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -d --name stf --net host devicefarmer/stf stf provider --connect-sub tcp://<span class="variable">$&#123;机器A的IP&#125;</span>:7114 --connect-push tcp://<span class="variable">$&#123;机器A的IP&#125;</span>:7116 --public-ip <span class="variable">$&#123;机器A的IP&#125;</span> --storage-url http://<span class="variable">$&#123;机器A的IP&#125;</span>:7100/</span></span><br></pre></td></tr></table></figure>

<ul>
<li>优点:灵活且理论支持无限拓展连接设备</li>
<li>缺点:配置略微复杂</li>
</ul>
<p>部署好后访问安装OpenSTF管理平台机器的ip地址加端口7100,如<a href="http://192.168.1.1:7100/">http://192.168.1.1:7100</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>开发实战</tag>
      </tags>
  </entry>
  <entry>
    <title>修复flatpak版jadx文件无法访问宿主机目录</title>
    <url>/2024/12/06/%E4%BF%AE%E5%A4%8Dflatpak%E7%89%88jadx%E6%96%87%E4%BB%B6%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%E5%AE%BF%E4%B8%BB%E6%9C%BA%E7%9B%AE%E5%BD%95/</url>
    <content><![CDATA[<ol>
<li><p>安装flatpak权限管理软件<code>Flatseal</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">flatpak install flathub com.github.tchx84.Flatseal</span><br></pre></td></tr></table></figure></li>
<li><p>开启All system files访问权限</p>
<p><img src="/2024/12/06/%E4%BF%AE%E5%A4%8Dflatpak%E7%89%88jadx%E6%96%87%E4%BB%B6%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE%E5%AE%BF%E4%B8%BB%E6%9C%BA%E7%9B%AE%E5%BD%95/image-20241206140656066.png" alt="image-20241206140656066"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>奇巧淫技</tag>
      </tags>
  </entry>
  <entry>
    <title>刻滑入门</title>
    <url>/2023/10/29/%E5%88%BB%E6%BB%91%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h2 id="一、滑行姿态"><a href="#一、滑行姿态" class="headerlink" title="一、滑行姿态"></a>一、滑行姿态</h2><p>滑雪是下半身运动，对于初学者首先要保证上半身不动尽量使用下半身的力量去控制雪板。</p>
<p>这里有个小技巧可以将后手<strong>背于腰部</strong>这样既可以保证上半身不弯曲也可以保证手不会乱动影响重心。</p>
<p>总结一下几点：</p>
<ol>
<li><p>身体站直与雪板平行</p>
</li>
<li><p>在滑行阶段视线指向板头前进方向</p>
</li>
<li><p>在换刃阶段视线指向板头方向+/-45度方向</p>
</li>
</ol>
<h2 id="二、寻找刃感"><a href="#二、寻找刃感" class="headerlink" title="二、寻找刃感"></a>二、寻找刃感</h2><ol>
<li><p>横向切坡顺着板刃的方向滑行，<strong>切勿对抗这股力量否则在滑行过程中会很累</strong></p>
</li>
<li><p>过弯顺着这股力量做圆弯滑行，<strong>切勿使用后腿力量搓雪转弯</strong></p>
</li>
</ol>
<h2 id="三、稳定滑行"><a href="#三、稳定滑行" class="headerlink" title="三、稳定滑行"></a>三、稳定滑行</h2><ol>
<li><p>在横切雪道时使用开放站姿同时尽量压低前脚重心</p>
</li>
<li><p>加入引申动作：前刃切坡（压）- 换刃（起）- 后刃切坡（压）</p>
</li>
</ol>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>运动</tag>
      </tags>
  </entry>
  <entry>
    <title>奥林巴斯II</title>
    <url>/2023/01/31/%E5%A5%A5%E6%9E%97%E5%B7%B4%E6%96%AFII/</url>
    <content><![CDATA[<h2 id="我的第一台微单奥林巴斯II"><a href="#我的第一台微单奥林巴斯II" class="headerlink" title="我的第一台微单奥林巴斯II"></a>我的第一台微单奥林巴斯II</h2>]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>旅行</tag>
        <tag>摄影剪辑</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Android上通过pm命令安装拆分包</title>
    <url>/2019/11/26/%E5%A6%82%E4%BD%95%E5%9C%A8Android%E4%B8%8A%E9%80%9A%E8%BF%87pm%E5%91%BD%E4%BB%A4%E5%AE%89%E8%A3%85%E6%8B%86%E5%88%86%E5%8C%85/</url>
    <content><![CDATA[<ol>
<li>首先需要先调用<code>pm install-create -S [size]</code>创建一个install session 其中<code>[size]</code>是指所有拆分文件的总字节数，不过不加<code>-S [size]</code>貌似也是可以的，命令执行完会返回一个session id 这个session会在下面用到。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pm install-create -S 28658294</span><br><span class="line">Success: created install session [1691973442]</span><br></pre></td></tr></table></figure>
<span id="more"></span></li>
<li>写入拆分包<code>pm install-write -S [size] [session-id] [file-name] [file-path]</code> 如果有多个拆分包需要写入多次</li>
</ol>
<ul>
<li><code>[size]</code>单个拆分包文件的字节数</li>
<li><code>[session-id]</code> 调用<code>pm install-create -S [size]</code>所得到的session id</li>
<li><code>[file-name]</code> 拆分包文件名称保持原样就可以了</li>
<li><code>[file-path]</code> 需要写入拆分包文件路径<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pm install-write -S 23728613 1691973442 base.apk /data/local/tmp/com.makemytrip/base.apk</span><br><span class="line">pm install-write -S 2587864 1691973442 split_config.arm64_v8a.apk /data/local/tmp/com.makemytrip/split_config.arm64_v8a.apk</span><br><span class="line">pm install-write -S 2341817 1691973442 split_config.hdpi.apk /data/local/tmp/com.makemytrip/split_config.hdpi.apk</span><br></pre></td></tr></table></figure></li>
</ul>
<ol start="3">
<li><p>提交安装<code>pm install-commit [session-id]</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pm install-commit 1691973442</span><br></pre></td></tr></table></figure></li>
<li><p>取消安装<code>pm install-abandon [session-id]</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pm install-abandon 1691973442</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="或者可以使用下面的脚本自动安装"><a href="#或者可以使用下面的脚本自动安装" class="headerlink" title="或者可以使用下面的脚本自动安装"></a>或者可以使用下面的脚本自动安装</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#!/system/bin/sh</span><br><span class="line"></span><br><span class="line"># get the total size in byte</span><br><span class="line">total=0</span><br><span class="line">for apk in *.apk</span><br><span class="line">do</span><br><span class="line">    o=( $(ls -l $apk) )</span><br><span class="line">    let total=$total+$&#123;o[3]&#125;</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">echo &quot;pm install-create total size $total&quot;</span><br><span class="line"></span><br><span class="line">create=$(pm install-create -S $total)</span><br><span class="line">sid=$(echo $create |grep -E -o &#x27;[0-9]+&#x27;)</span><br><span class="line"></span><br><span class="line">echo &quot;pm install-create session id $sid&quot;</span><br><span class="line"></span><br><span class="line">for apk in *.apk</span><br><span class="line">do</span><br><span class="line">    _ls_out=( $(ls -l $apk) )</span><br><span class="line">    echo &quot;write $apk to $sid&quot;</span><br><span class="line">    cat $apk | pm install-write -S $&#123;_ls_out[3]&#125; $sid $apk -</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">pm install-commit $sid</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>开发实战</tag>
      </tags>
  </entry>
  <entry>
    <title>如何获得一个垂直的SeekBar</title>
    <url>/2020/11/13/%E5%A6%82%E4%BD%95%E8%8E%B7%E5%BE%97%E4%B8%80%E4%B8%AA%E5%9E%82%E7%9B%B4%E7%9A%84SeekBar/</url>
    <content><![CDATA[<h2 id="小记"><a href="#小记" class="headerlink" title="小记"></a>小记</h2><p>在开发”上帝模式”的一个新功能中偶然需要用到一个垂直的<code>SeekBar</code>,一开始想得比较简单系统应该有提供这样垂直的<code>SeekBar</code>但是翻了一下SDK并没有于是上网搜索,查找下来无非这两种:</p>
<ol>
<li>使用原生的<code>SeekBar</code>旋转90度</li>
<li>自定义<code>SeekBar</code>在<code>onDraw</code>方法和<code>onMeasure</code>方法中旋转画布并重新计算控件大小</li>
</ol>
<p>那为什么有两种呢让我们来分别分析一下这两个方案的优缺点:</p>
<ul>
<li><p>第一种使用原生的<code>SeekBar</code>最简单但是旋转后的宽高就不对了,实际上的宽是旋转后的高这也导致如果我们要增加<code>SeekBar</code>的高度就需要修改宽度但是会导致布局错乱以下是旋转前后对比:</p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">SeekBar</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/seekbar1&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;120dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:clickable</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layoutDirection</span>=<span class="string">&quot;rtl&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">SeekBar</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/seekbar2&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;120dp&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:clickable</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layoutDirection</span>=<span class="string">&quot;rtl&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:rotation</span>=<span class="string">&quot;90&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<span id="more"></span>

<p><img src="/2020/11/13/%E5%A6%82%E4%BD%95%E8%8E%B7%E5%BE%97%E4%B8%80%E4%B8%AA%E5%9E%82%E7%9B%B4%E7%9A%84SeekBar/rotate_compare.png"></p>
<p> 可以看到旋转后的<code>SeekBar</code>实际上控件位置并未改变,这会导致布局有问题, 因此有了第二种方案</p>
<ul>
<li><p>第二种自定义<code>SeekBar</code>这种方式就是为了解决第一种方式会导致控件实际布局大小不一致的情况,核心的逻辑也是旋转画布并且重新计算控件大小</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VerticalSeekBar</span> <span class="keyword">extends</span> <span class="title class_">SeekBar</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">VerticalSeekBar</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">VerticalSeekBar</span><span class="params">(Context context, AttributeSet attrs, <span class="type">int</span> defStyle)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, attrs, defStyle);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">VerticalSeekBar</span><span class="params">(Context context, AttributeSet attrs)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onSizeChanged</span><span class="params">(<span class="type">int</span> w, <span class="type">int</span> h, <span class="type">int</span> oldw, <span class="type">int</span> oldh)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onSizeChanged(h, w, oldh, oldw);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">setProgress</span><span class="params">(<span class="type">int</span> progress)</span>  <span class="comment">// it is necessary for calling setProgress on click of a button</span></span><br><span class="line">   &#123;</span><br><span class="line">    <span class="built_in">super</span>.setProgress(progress);</span><br><span class="line">    onSizeChanged(getWidth(), getHeight(), <span class="number">0</span>, <span class="number">0</span>); </span><br><span class="line">   &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">onMeasure</span><span class="params">(<span class="type">int</span> widthMeasureSpec, <span class="type">int</span> heightMeasureSpec)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.onMeasure(heightMeasureSpec, widthMeasureSpec);</span><br><span class="line">        setMeasuredDimension(getMeasuredHeight(), getMeasuredWidth());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">onDraw</span><span class="params">(Canvas c)</span> &#123;</span><br><span class="line">        c.rotate(-<span class="number">90</span>);</span><br><span class="line">        c.translate(-getHeight(), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">super</span>.onDraw(c);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">onTouchEvent</span><span class="params">(MotionEvent event)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!isEnabled()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                setProgress(getMax() - (<span class="type">int</span>) (getMax() * event.getY() / getHeight()));</span><br><span class="line">                onSizeChanged(getWidth(), getHeight(), <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> <img src="/2020/11/13/%E5%A6%82%E4%BD%95%E8%8E%B7%E5%BE%97%E4%B8%80%E4%B8%AA%E5%9E%82%E7%9B%B4%E7%9A%84SeekBar/custom_seekbar.png"></p>
<p>  问题至此看起来已解决,不过我还是不想自定义<code>SeekBar</code>因为看起来比较麻烦但是有什么办法可以解决原生<code>SeekBar</code>大小的问题呢?此时我想起来系统的音量调节面板很好奇它是怎么实现的于是开始源码的探索之路</p>
<p> 我们要找到音量面板得先找到它的的代码因为平时调节音量这个窗口都是浮动在其他窗口上的因此可以断定是个悬浮窗,那我们先用<code>dumpsys</code>把<code>window</code>信息拿出来看一下</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">adb shell dumpsys window</span></span><br><span class="line">...</span><br><span class="line">WINDOW MANAGER ANIMATOR STATE (dumpsys window animator)</span><br><span class="line">    DisplayContentsAnimator #0:</span><br><span class="line">      Window #0: WindowStateAnimator&#123;6d30f com.android.systemui.ImageWallpaper&#125;</span><br><span class="line">      Window #1: WindowStateAnimator&#123;400acfc com.android.settings/com.android.settings.applications.InstalledAppDetails&#125;</span><br><span class="line">      Window #2: WindowStateAnimator&#123;fe69f85 com.android.chrome/com.google.android.apps.chrome.Main&#125;</span><br><span class="line">      Window #3: WindowStateAnimator&#123;8607f21 com.android.launcher3/com.android.a1launcher.AndroidOneLauncher&#125;</span><br><span class="line">      Window #4: WindowStateAnimator&#123;faaa1da com.android.launcher3/com.android.a1launcher.AndroidOneLauncher&#125;</span><br><span class="line">      Window #5: WindowStateAnimator&#123;193860b com.mjar.test/com.mjar.test.MainActivity&#125;</span><br><span class="line">      Window #6: WindowStateAnimator&#123;6299ce8 com.iapgame.ia2048/com.example.jrsen.testapp.MainActivity&#125;</span><br><span class="line">      Window #7: WindowStateAnimator&#123;f6af01 DockedStackDivider&#125;</span><br><span class="line">      Window #8: WindowStateAnimator&#123;e2101a6 AssistPreviewPanel&#125;</span><br><span class="line">      Window #9: WindowStateAnimator&#123;f2b29d2 StatusBar&#125;</span><br><span class="line">      Window #10: WindowStateAnimator&#123;ef277e7 VolumeDialogImpl&#125;</span><br><span class="line">      Window #11: WindowStateAnimator&#123;68afaa3 PointerLocation&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p> 可以看到有一个很可疑的窗口 <code>Window #10: WindowStateAnimator&#123;ef277e7 VolumeDialogImpl&#125;</code>名字看上去跟音量相关应该就是它没跑了,拿着这个名字到Android源码中搜索在<code>frameworks/base/packages/SystemUI/src/com/android/systemui/volume/VolumeDialogImpl.java</code> 中找到了它,跟了一下代码找到了加载布局的相关代码片段</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initRow</span><span class="params">(<span class="keyword">final</span> VolumeRow row, <span class="keyword">final</span> <span class="type">int</span> stream, <span class="type">int</span> iconRes, <span class="type">int</span> iconMuteRes,</span></span><br><span class="line"><span class="params">                     <span class="type">boolean</span> important, <span class="type">boolean</span> defaultStream)</span> &#123;</span><br><span class="line">    row.stream = stream;</span><br><span class="line">    row.iconRes = iconRes;</span><br><span class="line">    row.iconMuteRes = iconMuteRes;</span><br><span class="line">    row.important = important;</span><br><span class="line">    row.defaultStream = defaultStream;</span><br><span class="line">    row.view = mDialog.getLayoutInflater().inflate(R.layout.volume_dialog_row, <span class="literal">null</span>);</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 找到<code>frameworks/base/packages/SystemUI/res/layout/volume_dialog_row.xml</code>对应的布局文件</p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">FrameLayout</span></span></span><br><span class="line"><span class="tag">             <span class="attr">android:id</span>=<span class="string">&quot;@+id/volume_row_slider_frame&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">android:layout_marginTop</span>=<span class="string">&quot;@dimen/volume_dialog_slider_margin_top&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">android:layout_marginBottom</span>=<span class="string">&quot;@dimen/volume_dialog_slider_margin_bottom&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">android:layoutDirection</span>=<span class="string">&quot;rtl&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">android:layout_height</span>=<span class="string">&quot;@dimen/volume_dialog_slider_height&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">SeekBar</span></span></span><br><span class="line"><span class="tag">             <span class="attr">android:id</span>=<span class="string">&quot;@+id/volume_row_slider&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">android:clickable</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">android:layout_width</span>=<span class="string">&quot;@dimen/volume_dialog_slider_height&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">android:layoutDirection</span>=<span class="string">&quot;rtl&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">android:layout_gravity</span>=<span class="string">&quot;center&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">android:rotation</span>=<span class="string">&quot;90&quot;</span> /&gt;</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p> 到这里问题就找到答案了系统也是用的原生的<code>SeekBar</code>只不过在外层包裹了一个<code>FrameLayout</code>用于裁切<code>SeekBar</code>的实际大小,实在是秒啊!</p>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>求知若渴遇到不懂的多研究研究源码总能在里面找到惊喜</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>开发实战</tag>
      </tags>
  </entry>
  <entry>
    <title>如何调试Xposed模块不用重启</title>
    <url>/2019/11/29/%E5%A6%82%E4%BD%95%E8%B0%83%E8%AF%95Xposed%E6%A8%A1%E5%9D%97%E4%B8%8D%E7%94%A8%E9%87%8D%E5%90%AF/</url>
    <content><![CDATA[<blockquote>
<p>我想做过Xposed模块开发的一定对调试模块必须要重启手机这个机制不陌生， 拜这个机制所赐每次开发起来苦不堪言。稍微改点东西就需要重启手机少则几十秒要是碰到性能稍差一点的手机几分钟也是有可能的。那我们今天就来好好聊聊怎么才能让修改后的代码即时生效呢？首先要搞清楚这个问题还必须从为什么插件每次修改都要重启手机说起，我们可以通过<a href="https://github.com/rovo89/XposedBridge/wiki/Development-tutorial">Xposed开发文档</a>了解到Xposed的工作方式是通过替换/system/bin/app_process这个二进制文件来实现的进程注入的,我们知道app_process是所有进程的启动入口所以xposed替换了这个文件修改了内部执行逻辑优先去加载我们的插件然后再去加载原始的App代码所以才得以实现各种hook，但是问题就出现在加载插件上了，默认的第一次加载插件时系统会在<code>/data/dalvik-cache/</code>创建一份字节码文件给需虚拟机执行，但是因为这个文件只会在第一次加载的时候创建所以当我们修改了插件后再安装这个文件是不会变的，这也就导致我们的改动不会立即生效需要重启手机让系统生成一个新的字节码文件，那肯定有小伙伴会想那我手动把这个字节码文件删了呢？很遗憾我在Android7.0上尝试了一下并未成功原因未知。</p>
</blockquote>
<span id="more"></span>
<blockquote>
<p>好了既然我们知道问题产生的原因那我们就可以找到相应的解决办法，知己知彼百战不殆我们可以在Xposed加载我们插件代码的时候加一层代理用来动态找我们的插件代码位置这样就可以实现不用重启手机即时生效了当然如果仅hook应用了的话还需要强行停止一下应用以确保进程重新加载新代码，如果hook <code>system_server</code>进程了的话那还是需要重启手机的因为需要让<code>system_server</code>进程重新启动加载新的插件代码。</p>
</blockquote>
<blockquote>
<p>下面是完整的动态加载代码可以直接使用，仅在调试时使用请勿在发布版本中用!</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 开发更新模块无需重启 需要在xposed_init指定</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">HotLoader</span> <span class="keyword">implements</span> <span class="title class_">IXposedHookLoadPackage</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">TAG</span> <span class="operator">=</span> HotLoader.class.getSimpleName();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Class&lt;? <span class="keyword">extends</span> <span class="title class_">IXposedHookLoadPackage</span>&gt; XPOSED_INIT_CLASS = MainPlugin.class;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handleLoadPackage</span><span class="params">(XC_LoadPackage.LoadPackageParam lpparam)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(Process.myUid() == Process.SYSTEM_UID)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">IXposedHookLoadPackage</span> <span class="variable">iXposedHookLoadPackage</span> <span class="operator">=</span> XPOSED_INIT_CLASS.newInstance();</span><br><span class="line">                iXposedHookLoadPackage.handleLoadPackage(lpparam);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">PackageInfo</span> <span class="variable">packageInfo</span> <span class="operator">=</span> getPackageInfo(BuildConfig.APPLICATION_ID, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">                Log.i(TAG, <span class="string">&quot;hot load dex path:&quot;</span> + packageInfo.applicationInfo.sourceDir + <span class="string">&quot; uid=&quot;</span> + Process.myUid());</span><br><span class="line">                <span class="type">PathClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PathClassLoader</span>(packageInfo.applicationInfo.sourceDir, IXposedHookLoadPackage.class.getClassLoader());</span><br><span class="line">                <span class="type">IXposedHookLoadPackage</span> <span class="variable">iXposedHookLoadPackage</span> <span class="operator">=</span> (IXposedHookLoadPackage)classLoader.loadClass(XPOSED_INIT_CLASS.getName()).newInstance();</span><br><span class="line">                iXposedHookLoadPackage.handleLoadPackage(lpparam);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span>(Throwable t)</span><br><span class="line">        &#123;</span><br><span class="line">            Log.e(TAG, <span class="string">&quot;loader exception&quot;</span>, t);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> PackageInfo <span class="title function_">getPackageInfo</span><span class="params">(String packageName, <span class="type">int</span> flags, <span class="type">int</span> userId)</span> <span class="keyword">throws</span> Exception</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="meta">@SuppressLint(&quot;PrivateApi&quot;)</span> Class&lt;?&gt; ServiceManagerClass = Class.forName(<span class="string">&quot;android.os.ServiceManager&quot;</span>);</span><br><span class="line">        <span class="type">IBinder</span> <span class="variable">binder</span> <span class="operator">=</span> (IBinder)XposedHelpers.callStaticMethod(ServiceManagerClass, <span class="string">&quot;checkService&quot;</span>, <span class="string">&quot;package&quot;</span>);</span><br><span class="line">        <span class="meta">@SuppressLint(&quot;PrivateApi&quot;)</span> Class&lt;?&gt; IPackageManager$StubClass = Class.forName(<span class="string">&quot;android.content.pm.IPackageManager$Stub&quot;</span>);</span><br><span class="line">        <span class="type">IInterface</span> <span class="variable">packageServiceManager</span> <span class="operator">=</span> (IInterface)XposedHelpers.callStaticMethod(IPackageManager$StubClass, <span class="string">&quot;asInterface&quot;</span>, binder);</span><br><span class="line">        <span class="keyword">return</span> (PackageInfo)XposedHelpers.callMethod(packageServiceManager, <span class="string">&quot;getPackageInfo&quot;</span>, packageName, flags, userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>移动安全</tag>
        <tag>Xposed</tag>
      </tags>
  </entry>
  <entry>
    <title>如何远程调试一台Android设备</title>
    <url>/2020/05/21/%E5%A6%82%E4%BD%95%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E4%B8%80%E5%8F%B0Android%E8%AE%BE%E5%A4%87/</url>
    <content><![CDATA[<p>要想跨越公网调试Android设备首先需要解决两个问题:</p>
<ol>
<li>如何让adb走tcp通信</li>
<li>如何从公网连接这台设备</li>
</ol>
<h2 id="第一个问题-通过tcp调试Android手机"><a href="#第一个问题-通过tcp调试Android手机" class="headerlink" title="第一个问题:通过tcp调试Android手机"></a>第一个问题:通过tcp调试Android手机</h2><p>其实<code>adb</code>本身是支持通过tcp协议传输数据的只是可能大部分人从来没用过这个功能,大家可以在终端里面输入adb –help查看,里面有这么几个参数:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">networking:</span><br><span class="line"> connect HOST[:PORT]      connect to a device via TCP/IP</span><br><span class="line"> disconnect [[HOST]:PORT] disconnect from given TCP/IP device, or all</span><br><span class="line">...</span><br><span class="line"> usb                      restart adbd listening on USB</span><br><span class="line"> tcpip PORT               restart adbd listening on TCP on PORT</span><br></pre></td></tr></table></figure>

<p>connect和disconnect是用来连接一台远程设备或者断开远程设备的,usb和tcpip选项是用来切换手机端adbd守护进程工作模式的我们要用到的就是tcpip这个参数使adbd服务监听在一个特定的网络端口上</p>
<p>在电脑端执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell ifconfig wlan0 #先查看一下手机wifi的ip地址后续连接的时候会用到</span><br><span class="line">adb tcpip 5555 #将手机切换到tcp模式并在5555端口上监听</span><br><span class="line">adb connect 192.168.1.8:5555 #连接手机对应的ip地址和端口</span><br></pre></td></tr></table></figure>

<p>或者在已root的设备上使用<code>termux</code>软件设置adbd为tcp模式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 持久化设置</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">setprop persist.adb.tcp.port 5555</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">stop adbd; start adbd</span></span><br><span class="line">// 一次性设置重启后失效</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">setprop service.adb.tcp.port 5555</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">stop adbd; start adbd</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>至此第一个问题已解决</p>
<span id="more"></span>

<h2 id="第二个问题-跨越公网连接设备"><a href="#第二个问题-跨越公网连接设备" class="headerlink" title="第二个问题:跨越公网连接设备"></a>第二个问题:跨越公网连接设备</h2><p>在大多数的环境中我们手机都是通过连接一台无线路由器NAT上网的,但是熟悉网络的小伙伴一定知道路由器并不会给手机分配一个公网IP而是一个内网的,因此我们理论上从公网上是不能直接访问到这台手机的.这里我们需要做一个内网穿透把这台手机给暴露在公网上这样我们才能直接访问,而目前内网穿透的方案有很多像商业的<code>花生壳</code>以及开源的<code>nginx</code>或<code>frp</code>这些,商业的限制太多切收费而<code>nginx</code>又太复杂那剩下的只有<code>frp</code>了不了解<code>frp</code>的同学可以自行搜索一下使用起来也比较简单,不过这里又有一个问题了我们需要一台具有公网IP服务器来运行<code>frp</code>的server端!这…貌似又陷入了死循环… 不过幸好找到一个免费的<a href="https://www.natfrp.com/">frp服务器</a>用<a href="https://github.com/FrpcCluster/frpc-Android">Android版本的frp的客户端</a>可以直接连接并且速度还不错具体怎么配置查看frp文档很简单,感谢站长用爱发电! 至此需要的东西都准备齐了大致的网络拓扑如下</p>
<p><img src="https://mermaid.ink/img/eyJjb2RlIjoic2VxdWVuY2VEaWFncmFtXG4gICAgQW5kcm9pZOiuvuWkhy0tPj5uYXRmcnDmnI3liqHlmag66YCa6L-HZnJwY-aYoOWwhDU1NTXnq6_lj6NcbiAgICBub3RlIG92ZXIgQW5kcm9pZOiuvuWkhzphZGJk55uR5ZCsNTU1Neerr-WPo1xuICAgIG5vdGUgb3ZlciBuYXRmcnDmnI3liqHlmag655uR5ZCseC54LngueDo1NTU1XG4gICAgUEPlvIDlj5HosIPor5XkuLvmnLotPj5uYXRmcnDmnI3liqHlmag6dGNwXG4gICAgbm90ZSBvdmVyIFBD5byA5Y-R6LCD6K-V5Li75py6OmFkYiBjb25uZWN0IHgueC54Lng6NTU1NVxuICAgIG5hdGZycOacjeWKoeWZqC0tPj5BbmRyb2lk6K6-5aSHOui9rOWPkWNvbm5lY3Tor7fmsYJcbiAgICAgICAgICAgICIsIm1lcm1haWQiOnt9LCJ1cGRhdGVFZGl0b3IiOmZhbHNlfQ"></p>
<ol>
<li><p>先把Android设备切换到tcp模式下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb tcpip 5555 #将手机切换到tcp模式并在5555端口上监听</span><br></pre></td></tr></table></figure></li>
<li><p>去natfrp网站注册账号申请一个隧道<br><img src="/2020/05/21/%E5%A6%82%E4%BD%95%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E4%B8%80%E5%8F%B0Android%E8%AE%BE%E5%A4%87/step_1.png">创建好了之后点击配置文件这个选择之前申请的服务器节点下面就会限制对应的配置文件</p>
<p><img src="/2020/05/21/%E5%A6%82%E4%BD%95%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E4%B8%80%E5%8F%B0Android%E8%AE%BE%E5%A4%87/step_2.png"></p>
</li>
<li><p>安装Android frpc客户端</p>
<ul>
<li><p>下载对应手机架构的<a href="https://github.com/fatedier/frp/releases">frpc客户端</a><br>arm架构下载<a href="https://github.com/fatedier/frp/releases/download/v0.33.0/frp_0.33.0_linux_arm.tar.gz">frp_0.33.0_linux_arm.tar.gz</a><br>arm64架构下载<a href="https://github.com/fatedier/frp/releases/download/v0.33.0/frp_0.33.0_linux_arm64.tar.gz">frp_0.33.0_linux_arm64.tar.gz</a></p>
</li>
<li><p>下载完成后从压缩文件中把<code>frpc</code>解压出来传到设备上的临时目录并追加执行权限</p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb push frpc /data/local/tmp</span><br><span class="line">adb shell chmod +x /data/local/tmp/frpc</span><br></pre></td></tr></table></figure></li>
<li><p>导入在网站上生成的客户端配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb shell</span><br><span class="line"></span><br><span class="line">cat &gt; /sdcard/frpc.ini &lt;&lt; EOL</span><br><span class="line">[common]</span><br><span class="line">server_addr = 27.155.87.89</span><br><span class="line">server_port = 7000</span><br><span class="line">tcp_mux = true</span><br><span class="line">pool_count = 1</span><br><span class="line">protocol = tcp</span><br><span class="line">user = xxxxxxxxxxxxxx</span><br><span class="line">token = xxxxxxxxxxxxxxxx</span><br><span class="line">dns_server = 114.114.114.114</span><br><span class="line"> </span><br><span class="line">[AndroidTunnel]</span><br><span class="line">privilege_mode = true</span><br><span class="line">type = tcp</span><br><span class="line">local_ip = 127.0.0.1</span><br><span class="line">local_port = 5555</span><br><span class="line">remote_port = 58998</span><br><span class="line">use_encryption = false</span><br><span class="line">use_compression = true</span><br><span class="line">EOL</span><br><span class="line"> </span><br></pre></td></tr></table></figure></li>
<li><p>运行<code>frpc</code>客户端映射端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup /data/local/tmp/frpc -c /sdcard/frpc.ini &gt; /sdcard/frpc.log &amp;</span><br></pre></td></tr></table></figure>
<blockquote>
<p> 执行完之后就可以把命令行窗口给关闭了</p>
</blockquote>
</li>
</ul>
</li>
<li><p>远程调试</p>
<p>找到客户端配置文件中的<code>server_addr</code>和<code>remote_port</code>字段这两个就是我们的连接设备的地址和端口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adb connect 27.155.87.89:58998</span><br></pre></td></tr></table></figure>

<p>如果不出意外的话应该就会连上的之后就可以像在本地一样调试设备了</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>奇巧淫技</tag>
      </tags>
  </entry>
  <entry>
    <title>找回Ubuntu16.04中nautilus输入文字快速定位文件功能</title>
    <url>/2020/12/08/%E6%89%BE%E5%9B%9EUbuntu16.04%E4%B8%ADnautilus%E8%BE%93%E5%85%A5%E6%96%87%E5%AD%97%E5%BF%AB%E9%80%9F%E5%AE%9A%E4%BD%8D%E6%96%87%E4%BB%B6%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<p>在<code>16.04</code>的版本中<code>nautilus</code>文件管理器有一项快速定位文件的功能非常好用直接在文件夹中打出首字母即可快速定位到文件,但是在<code>18.04</code>以上的版本中默认就取消了这项功能使得我迁移到新版本中非常不适应今天碰巧找到了找回这个功能的办法记录一下:</p>
<ol>
<li>第一种安装第三方插件 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:lubomir-brindza/nautilus-typeahead</span><br><span class="line">sudo apt dist-upgrade</span><br><span class="line">nautilus -r</span><br></pre></td></tr></table></figure></li>
<li>第二种调整配置文件<br> 先安装<code>dconf</code>工具 <code>sudo apt install dconf-editor</code><br> 打开<code>dconf-editor</code>找到<code>org -&gt; gnome -&gt; nautilus -&gt; preferences -&gt; enable-interactive-search </code>打钩即可</li>
</ol>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>奇巧淫技</tag>
      </tags>
  </entry>
  <entry>
    <title>查看apk签名信息</title>
    <url>/2020/08/03/%E6%9F%A5%E7%9C%8Bapk%E7%AD%BE%E5%90%8D%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">keytool -printcert -jarfile sample.apk</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>奇巧淫技</tag>
      </tags>
  </entry>
  <entry>
    <title>特斯拉-科技与狠活</title>
    <url>/2023/03/21/%E7%89%B9%E6%96%AF%E6%8B%89-%E7%A7%91%E6%8A%80%E4%B8%8E%E7%8B%A0%E6%B4%BB/</url>
    <content><![CDATA[<h2 id="灯光秀资源"><a href="#灯光秀资源" class="headerlink" title="灯光秀资源"></a>灯光秀资源</h2><ul>
<li>Michael Jackson: <a href="LightShow.zip">Beat It</a></li>
</ul>
<h2 id="手机屏幕串流至特斯拉-Tesla-Mirror-Android-screen-stream-to-tesla"><a href="#手机屏幕串流至特斯拉-Tesla-Mirror-Android-screen-stream-to-tesla" class="headerlink" title="手机屏幕串流至特斯拉|Tesla Mirror|Android screen stream to tesla"></a>手机屏幕串流至特斯拉|Tesla Mirror|Android screen stream to tesla</h2><p>之前使用过各种投屏软件在特斯拉上均无法成功投屏，后来意外知道特斯拉有个限制就是不允许直接访问内网IP，知道这个特点后我们就可以轻松绕过～</p>
<blockquote>
<p>前提条件：手机已root方法请自行查找</p>
</blockquote>
<ol>
<li><p>安装<a href="https://f-droid.org/zh_Hans/packages/com.termux/">Termux</a>终端应用和<a href="https://f-droid.org/packages/com.termux.boot/">Termux:Boot</a>插件</p>
<ol>
<li><p>使用<code>pkg install tsu</code>命令安装提权包</p>
<p> <img src="/2023/03/21/%E7%89%B9%E6%96%AF%E6%8B%89-%E7%A7%91%E6%8A%80%E4%B8%8E%E7%8B%A0%E6%B4%BB/ScreenSteam-intro.png"></p>
</li>
<li><p>执行命令将自动设置脚本添加至开机启动项方便以后使用</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p ~/.termux/boot/</span><br><span class="line">cat &lt;&lt;EOT&gt;&gt; ~/.termux/boot/add-tesla-support</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/data/data/com.termux/files/usr/bin/sh</span></span><br><span class="line">sudo ip link add tesla type dummy</span><br><span class="line">sudo ifconfig tesla 11.11.11.11 netmask 255.255.255.0 up</span><br><span class="line">EOT</span><br></pre></td></tr></table></figure>

<p> <img src="/2023/03/21/%E7%89%B9%E6%96%AF%E6%8B%89-%E7%A7%91%E6%8A%80%E4%B8%8E%E7%8B%A0%E6%B4%BB/ScreenSteam-intro2.png"></p>
</li>
<li><p>将Termux:Boot的“电池优化选项”关闭，并打开应用一次以允许开机自启动</p>
<p> <img src="/2023/03/21/%E7%89%B9%E6%96%AF%E6%8B%89-%E7%A7%91%E6%8A%80%E4%B8%8E%E7%8B%A0%E6%B4%BB/ScreenSteam-intro3.png"></p>
</li>
<li><p>执行脚本添加一块虚拟网卡并设置公网IP</p>
<p> <code>sudo sh ~/.termux/boot/add-tesla-support</code></p>
<p> <img src="/2023/03/21/%E7%89%B9%E6%96%AF%E6%8B%89-%E7%A7%91%E6%8A%80%E4%B8%8E%E7%8B%A0%E6%B4%BB/ScreenSteam-intro4.png"></p>
</li>
</ol>
</li>
<li><p>开启手机5GHz热点并将特斯拉连接到这个热点</p>
<p> <img src="/2023/03/21/%E7%89%B9%E6%96%AF%E6%8B%89-%E7%A7%91%E6%8A%80%E4%B8%8E%E7%8B%A0%E6%B4%BB/ScreenSteam-intro5.png"></p>
</li>
<li><p>安装<a href="https://f-droid.org/zh_Hans/packages/info.dvkr.screenstream/">Screen steam over HTTP</a>屏幕串流应用进行如下配置</p>
<ol>
<li><p>勾选“设置”-&gt;“保持设备唤醒”和“自动开始/停止视频流”</p>
<p> <img src="/2023/03/21/%E7%89%B9%E6%96%AF%E6%8B%89-%E7%A7%91%E6%8A%80%E4%B8%8E%E7%8B%A0%E6%B4%BB/ScreenSteam-intro6.png"></p>
</li>
<li><p>取消勾选“设置”-&gt;”高级”-&gt;”只用WIFI”</p>
<p> <img src="/2023/03/21/%E7%89%B9%E6%96%AF%E6%8B%89-%E7%A7%91%E6%8A%80%E4%B8%8E%E7%8B%A0%E6%B4%BB/ScreenSteam-intro7.png"></p>
</li>
</ol>
</li>
<li><p>在“视频流”页确认能否看到新加的虚拟网卡和IP</p>
<p> <img src="/2023/03/21/%E7%89%B9%E6%96%AF%E6%8B%89-%E7%A7%91%E6%8A%80%E4%B8%8E%E7%8B%A0%E6%B4%BB/ScreenSteam-intro8.png"></p>
</li>
<li><p>在特斯拉车机上访问<a href="http://11.11.11.11:8080/">http://11.11.11.11:8080</a>即可串流屏幕内容至特斯拉车机上，首次访问需要在手机上允许投射内容，收藏一下这个网址方便下次使用。</p>
<p> <img src="/2023/03/21/%E7%89%B9%E6%96%AF%E6%8B%89-%E7%A7%91%E6%8A%80%E4%B8%8E%E7%8B%A0%E6%B4%BB/ScreenSteam-intro9.png"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>车</category>
      </categories>
      <tags>
        <tag>Tesla</tag>
      </tags>
  </entry>
  <entry>
    <title>用 Golang 在 Android 上实现代理的几个问题</title>
    <url>/2020/04/23/%E7%94%A8-Golang-%E5%9C%A8-Android-%E4%B8%8A%E5%AE%9E%E7%8E%B0%E4%BB%A3%E7%90%86%E7%9A%84%E5%87%A0%E4%B8%AA%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<blockquote>
<p>转自:<a href="https://blog.dio.wtf/post/tips-for-golang-proxy-for-android/">https://blog.dio.wtf/post/tips-for-golang-proxy-for-android/</a> 仅供备份</p>
</blockquote>
<p>用 Golang 来实现的代理不要太多，像 <a href="https://github.com/v2ray/v2ray-core">V2Ray</a>，<a href="https://github.com/txthinking/brook">Brook</a>，<a href="https://github.com/Dreamacro/clash">Clash</a>。一方面得益于 Golang 标准库对于网络编程的支持，另一方面也是由于其便利的交叉编译。如果要在 Android 上用 Golang 实现一套代理方案，还是必须要处理一些问题，或者说是所有的代理方案都要解决的平台特性。</p>
<h2 id="IPC-传递文件描述符"><a href="#IPC-传递文件描述符" class="headerlink" title="IPC 传递文件描述符"></a>IPC 传递文件描述符</h2><p>Android 上使用 <a href="https://developer.android.com/reference/android/net/VpnService">VpnService</a> 由系统创建一个 TUN 虚拟网卡并接收所有的流量，API 会返回一个 file descriptor，通过这个 FD 可以读取/写入 IP packet。</p>
<p>为了稳定性和性能考虑，我们通常会将代理程序放到一个单独的进程里。但是在 Android 的阉割版 Linux 环境下，子进程是无法访问父进程的 FD。这里就需要用到 Linux 通用的进程间共享 FD 的方案，也就是给 Unix Socket 设置 <code>SCM_RIGHTS</code> 标识，然后用 <code>recvmsg</code> 和 <code>sendmsg</code> 来收发。在 Android 和 Golang 中都有对应的 API。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> LocalSocket.setFileDescriptorsForSend (FileDescriptor[] fds)</span><br><span class="line"><span class="keyword">public</span> FileDescriptor[] LocalSocket.getAncillaryFileDescriptors ()</span><br></pre></td></tr></table></figure>

<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// UnixRights encodes file descriptors into a socket control message</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">syscall</span>.<span class="title">UnixRights</span><span class="params">(fds ...<span class="type">int</span>)</span></span> []<span class="type">byte</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">syscall</span>.<span class="title">Sendmsg</span><span class="params">(fd <span class="type">int</span>, p, oob []<span class="type">byte</span>, to Sockaddr, flags <span class="type">int</span>)</span></span> (err <span class="type">error</span>)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">syscall</span>.<span class="title">Recvmsg</span><span class="params">(fd <span class="type">int</span>, p, oob []<span class="type">byte</span>, flags <span class="type">int</span>)</span></span> (n, oobn <span class="type">int</span>, recvflags <span class="type">int</span>, from Sockaddr, err <span class="type">error</span>)</span><br><span class="line"><span class="comment">// ParseSocketControlMessage parses b as an array of socket control</span></span><br><span class="line"><span class="comment">// messages.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">syscall</span>.<span class="title">ParseSocketControlMessage</span><span class="params">(b []<span class="type">byte</span>)</span></span> ([]SocketControlMessage, <span class="type">error</span>)</span><br><span class="line"><span class="comment">// ParseUnixRights decodes a socket control message that contains an</span></span><br><span class="line"><span class="comment">// integer array of open file descriptors from another process.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">syscall</span>.<span class="title">ParseUnixRights</span><span class="params">(m *SocketControlMessage)</span></span> ([]<span class="type">int</span>, <span class="type">error</span>)</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<h2 id="Socket-建连之前-protect-文件描述符"><a href="#Socket-建连之前-protect-文件描述符" class="headerlink" title="Socket 建连之前 protect 文件描述符"></a>Socket 建连之前 protect 文件描述符</h2><p>如果我们在创建 TUN 的时候（启动 VpnService ）设置的路由是 0.0.0.0/0 的情况下，所有的本地流量都会经过 TUN 设备，包括代理应用的数据包，这样就会进入一个死循环。这里需要用到 VpnService 的 <a href="https://developer.android.com/reference/android/net/VpnService#protect(int)">protect</a> 函数，这个函数接收一个 TCP/UDP 的 Socket 或者一个 FD。经过 protected 的 Socket 收发的数据包就不在经过 TUN 设备了。</p>
<p>Golang 的 net 库对网络做了很好的封装，比如创建一个TCP连接，使用 net.Dial 就可以拿到一个成功连接 net.Conn。但是在 Android 上，我们必须先拿到 Socket 的 FD 并调用 protect，否则 net.Dial 只会返回 error。</p>
<p>基于 V2Ray 实现的代理（<a href="https://github.com/xiaokangwang/AndroidLibV2ray/blob/master/VPN/vpnservice_support.go">AndroidLibV2ray</a>和 <a href="https://github.com/2dust/v2rayNG/blob/1.1.12/AndroidLibV2rayLite/VPN/vpnservice_support.go">v2rayNG</a>）通常是直接创建 unix.Socket 然后调用 unix.Connect 建立连接，再对外封装成 net.Dial 方法。</p>
<p>在 Go 1.11 里标准库给 net.Dial 添加了 <a href="https://golang.org/pkg/net/#Dialer.Control">Dialer.Control</a> 这个字段，相当于给 net.Dialer 注册了一个Socket创建之后、连接建立之前的回调，可以很方便的拿到 net.Dialer 的 FD。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">d := &amp;net.Dialer&#123;&#125;</span><br><span class="line">d.Control = <span class="function"><span class="keyword">func</span><span class="params">(network, address <span class="type">string</span>, c syscall.RawConn)</span></span> <span class="type">error</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> c.Control(<span class="function"><span class="keyword">func</span><span class="params">(fd <span class="type">uintptr</span>)</span></span> &#123;</span><br><span class="line">        <span class="comment">// Access socket fd</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>P.S. 这里也可以通过 <a href="https://developer.android.com/reference/android/net/VpnService.Builder.html#addDisallowedApplication(java.lang.String)">VpnService.Builder.addDisallowedApplication</a> 把代理应用排除在外，这样就不需要使用 protect 了🤣。可以参考最近刚刚开源的 <a href="https://github.com/Kr328/ClashForAndroid/blob/24e1732091c1a5089858bfefc776fe229367b997/service/src/main/java/com/github/kr328/clash/service/TunService.kt#L149">ClashForAndroid</a></p>
<h2 id="选择-Gomobile-还是编译成-Exectuable-Binary"><a href="#选择-Gomobile-还是编译成-Exectuable-Binary" class="headerlink" title="选择 Gomobile 还是编译成 Exectuable Binary"></a>选择 Gomobile 还是编译成 Exectuable Binary</h2><p>Golang 官方实现了 <a href="https://github.com/golang/mobile">Gomobile</a> 用于编译移动端可用的 Golang 程序。在 Android 平台上编译的是包含 JNI interface 的 AAR 文件，可以直接从 Java 调用 Golang 代码。所以这种情况下通常将 Gomobile 和 VpnService 运行在同一个进程中，这样的话就不需要上面提到的 IPC 的工作了。这样实现的项目有 <a href="https://github.com/2dust/v2rayNG">V2RayNG</a> 和 <a href="https://github.com/eycorsican/kitsunebi-android">kitsunebi-android</a>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">App-&gt;VpnService: AIDL</span><br><span class="line">note over App:Main Process</span><br><span class="line">VpnService--&gt;Gomobile:JNI</span><br><span class="line">note over VpnService:VPN Process</span><br><span class="line">Gomobile--&gt;VpnService:JNI</span><br><span class="line">note over Gomobile:VPN Process</span><br><span class="line">VpnService-&gt;App:AIDL</span><br></pre></td></tr></table></figure>


<p>另一种做法是将 Golang 编译成可执行的二进制文件，然后通过 <code>ProcessBuilder</code> 或者 <code>Runtime.exec</code> 运行在独立进程里，需要 Unix Socket 进行进程间通讯。因为 ShadowSocks-Android 就是这样的实现的，所以也算是一个比较稳定主流的方案，这样实现的项目有 <a href="https://github.com/Kr328/ClashForAndroid">ClashForAndroid</a>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">App-&gt;VpnService:AIDL</span><br><span class="line">note over App:Main Process</span><br><span class="line">VpnService-&gt;Binary:Unix Socket</span><br><span class="line">note over VpnService:VPN Process</span><br><span class="line">Binary-&gt;VpnService:Unix Socket</span><br><span class="line">note over Binary:Isolate Process</span><br><span class="line">VpnService-&gt;App:AIDL</span><br></pre></td></tr></table></figure>

<p>目前来看两种方案都可以很好的工作在 Android 上，Gomobile 的优点就是 Java-&gt;Golang 调用比较方便，编译简单，但是相对的 Golang-&gt;Java 只能通过实现接口，另外包体积较大。具体选哪种就见仁见智了。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://fqrouter.tumblr.com/post/51474945203/socks%E4%BB%A3%E7%90%86%E8%BD%ACvpn">socks代理转VPN</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>开发实战</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Android Studio missing essential plugin org.jetbrains.android</title>
    <url>/2020/11/20/%E8%A7%A3%E5%86%B3Android-Studio-missing-essential-plugin-org-jetbrains-android/</url>
    <content><![CDATA[<p>最近把Android Studio升级到了<code>4.1.1</code>版本之前安装了一个<code>smailidea</code>的插件老是报不兼容于是强迫症的我手贱了一下把插件给禁用了,禁用的时候没注意把依赖的一些东西也给禁用了于是报了下面的错误</p>
<p><img src="/2020/11/20/%E8%A7%A3%E5%86%B3Android-Studio-missing-essential-plugin-org-jetbrains-android/picture_02.png"></p>
<p>这是禁用插件时候的依赖提示</p>
<p><img src="/2020/11/20/%E8%A7%A3%E5%86%B3Android-Studio-missing-essential-plugin-org-jetbrains-android/picture_01.png"></p>
<p>可以看见其实把很多核心的组件都给禁用了那怎么办呢?难不成真的要按提示上说的要重装Android Studio?不要慌问题不大其实还有一种办法就是把被禁用的插件恢复就可以了,大家可以把Android Studio的配置目录的<code>disabled_plugins.txt</code>这个文件删除这样Android Studio就可以正常启动了, 这个文件每个系统存放的位置不太一样一般都在下面这几个目录 如果不在可以在主目录全局搜索一下这个文件</p>
<p>Windows: <code>C:\Users\%USERNAME%\AndroidStudio4.1\config</code></p>
<p>Linux: <code>~/.config/Google/AndroidStudio4.1</code></p>
<p>MacOS: <code>~/Library/Application Support/Google/AndroidStudio4.1</code></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>疑难杂症</tag>
      </tags>
  </entry>
  <entry>
    <title>解决Ubuntu 20.04无法导入Charles证书</title>
    <url>/2021/12/15/%E8%A7%A3%E5%86%B3Ubuntu-20-04%E6%97%A0%E6%B3%95%E5%AF%BC%E5%85%A5Charles%E8%AF%81%E4%B9%A6/</url>
    <content><![CDATA[<p>之前在Ubuntu 16.04中使用Charles进行抓https的包一切都正常,但是最近在家里那台Ubuntu 20.04却始终装不上证书,会出现下面提示</p>
<p><img src="/2021/12/15/%E8%A7%A3%E5%86%B3Ubuntu-20-04%E6%97%A0%E6%B3%95%E5%AF%BC%E5%85%A5Charles%E8%AF%81%E4%B9%A6/1.png" alt="Screenshot from 2021-12-15 15-10-52"></p>
<p>每次导入证书右下角<code>Import</code>都不可点击,在Google找了很多资料都认为是一个Bug,毕竟在16.04上这么导入是没有问题的.</p>
<p>下面记录一下解决方案:</p>
<ol>
<li><p>用命令行安装证书,首先导出<code>Charles</code>证书: Help<code>-&gt;</code>SSL Proxying<code>-&gt;</code>Save Charles Root Certificate, 再执行以下命令将证书导入系统</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mv charles.pem /usr/local/share/ca-certificates/charles.crt</span><br><span class="line">sudo update-ca-certificates</span><br></pre></td></tr></table></figure></li>
<li><p>在Charles中开启SSL Proxying: Proxy<code>-&gt;</code>SSL Proxying Settings<code>-&gt;</code>SSL Proxying<code>-&gt;</code>Enable SSL Proxying, 点击Include下的<code>Add</code>按钮<code>Host</code>和<code>Port</code>设置为*, 点击确定即可.</p>
</li>
</ol>
<p><img src="/2021/12/15/%E8%A7%A3%E5%86%B3Ubuntu-20-04%E6%97%A0%E6%B3%95%E5%AF%BC%E5%85%A5Charles%E8%AF%81%E4%B9%A6/2.png" alt="Screenshot from 2021-12-15 15-29-57"></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>疑难杂症</tag>
      </tags>
  </entry>
  <entry>
    <title>解决gradle无法同步的问题</title>
    <url>/2021/01/14/%E8%A7%A3%E5%86%B3gradle%E6%97%A0%E6%B3%95%E5%90%8C%E6%AD%A5%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Could not install Gradle distribution from &#x27;http://services.gradle.org/distributions/gradle-6.5-bin.zip&#x27;.</span><br></pre></td></tr></table></figure>

<p>就在刚刚为了观摩一下<code>libgdx</code>引擎创建了一个工程虽然挂了梯子但是死活同步不了 不用说了肯定还是我们的万里长城防火墙搞的鬼了,感谢方校长让我们离西方的”邪恶势力”又远了一步!</p>
<p>好了 不吐槽了解决办法也很简单打开项目下的<code>gradle/wrapper/gradle-wrapper.properties</code>文件将下载地址改为<code>https</code>就好了</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>疑难杂症</tag>
      </tags>
  </entry>
  <entry>
    <title>记录一下解决Google Voice网页版拨打电话一闪而过的问题</title>
    <url>/2024/04/12/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E8%A7%A3%E5%86%B3Google-Voice%E7%BD%91%E9%A1%B5%E7%89%88%E6%8B%A8%E6%89%93%E7%94%B5%E8%AF%9D%E4%B8%80%E9%97%AA%E8%80%8C%E8%BF%87%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>我的电脑环境是Ubuntu 22.04连接了一个无线蓝牙耳机，当使用Google Voice网页版拨打电话时拨号界面总是一闪而过，后来网上查询各种方法也未解决，经过自己的一番折腾搞明白了原来是音频设置的问题</p>
<p>先检查一下音频设置有没有问题，麦克风、响铃、扬声器这三个框中都应该能看到你目前连接的设备才对</p>
<p><img src="/2024/04/12/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E8%A7%A3%E5%86%B3Google-Voice%E7%BD%91%E9%A1%B5%E7%89%88%E6%8B%A8%E6%89%93%E7%94%B5%E8%AF%9D%E4%B8%80%E9%97%AA%E8%80%8C%E8%BF%87%E7%9A%84%E9%97%AE%E9%A2%98/image-20240412114843186.png" alt="image-20240412114843186"></p>
<p><img src="/2024/04/12/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E8%A7%A3%E5%86%B3Google-Voice%E7%BD%91%E9%A1%B5%E7%89%88%E6%8B%A8%E6%89%93%E7%94%B5%E8%AF%9D%E4%B8%80%E9%97%AA%E8%80%8C%E8%BF%87%E7%9A%84%E9%97%AE%E9%A2%98/image-20240412115030371.png" alt="image-20240412115030371"></p>
<p>如果不能看见到系统设置中把相对应的输入、输出设备都打开就可以了</p>
<p><img src="/2024/04/12/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E8%A7%A3%E5%86%B3Google-Voice%E7%BD%91%E9%A1%B5%E7%89%88%E6%8B%A8%E6%89%93%E7%94%B5%E8%AF%9D%E4%B8%80%E9%97%AA%E8%80%8C%E8%BF%87%E7%9A%84%E9%97%AE%E9%A2%98/image-20240412115304805.png" alt="image-20240412115304805"></p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>疑难杂症</tag>
      </tags>
  </entry>
  <entry>
    <title>零成本让你拥有Mac触摸板鼠标</title>
    <url>/2020/04/30/%E9%9B%B6%E6%88%90%E6%9C%AC%E8%AE%A9%E4%BD%A0%E6%8B%A5%E6%9C%89Mac%E8%A7%A6%E6%91%B8%E6%9D%BF%E9%BC%A0%E6%A0%87/</url>
    <content><![CDATA[<h2 id="序章"><a href="#序章" class="headerlink" title="序章"></a>序章</h2><p>相信用过Mac触摸板鼠标的都被它的丝滑流畅给惊艳过,但是作为一个IT穷屌丝怎么买得起那样高大上的玩意,不过前几天玩<code>VNC</code>的时候倒是有一个很意外发现用起来简直跟Mac鼠标有得一拼.</p>
<h2 id="你需要的东西"><a href="#你需要的东西" class="headerlink" title="你需要的东西"></a>你需要的东西</h2><ul>
<li><p>手机一台<code>Android</code>/<code>IOS</code>都可以</p>
</li>
<li><p><code>RealVNC</code><a href="http://play.google.com/store/apps/details?id=com.realvnc.viewer.android">Android</a>/<a href="https://apps.apple.com/us/app/vnc-viewer/id352019548">IOS</a></p>
</li>
</ul>
<h2 id="我该怎么用"><a href="#我该怎么用" class="headerlink" title="我该怎么用"></a>我该怎么用</h2><p>原理很简单就是在电脑上开启vnc server不同操作系统开启方式不一样像Mac和Ubuntu这样本身就是支持VNC的直接在系统设置中打开屏幕共享即可而Windows用户稍微麻烦一些需要额外安装一个<a href="https://www.tightvnc.com/download.php">tightvnc</a>软件安装过程比较简单在此不讨论自行研究,这样我们直接从手机端通过VNC连过去一个触摸板鼠标就做好了,主要是RealVNC这个软件操作起来比较流畅下面我介绍一下这个软件基本的操作用法:</p>
<ol>
<li><code>鼠标左击</code> 直接点击一下屏幕</li>
<li><code>鼠标右击</code> 双指点击一下屏幕</li>
<li><code>滚动网页</code> 双指上下搓屏幕</li>
<li><code>鼠标选择文字</code> 双击屏幕拖动选择</li>
<li><code>鼠标粘贴问题</code> 三指点击屏幕</li>
</ol>
<p>其他的骚操作可以查看RealVNC的帮助信息</p>
<h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>至此你已经拥有一个流畅的触摸板鼠标了,当然相比于Mac的触摸板鼠标还差很远但是已经有了几分的样子,用手机当触摸板想想也是蛮炫酷的当然有个不好的地方就是手机的画面是和电脑同步的要是有个黑屏只支持操作的模式就好了.</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>奇巧淫技</tag>
        <tag>奇思妙想</tag>
      </tags>
  </entry>
</search>
